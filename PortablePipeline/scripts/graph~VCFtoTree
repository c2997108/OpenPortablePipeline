#!/bin/bash

explanation='
Draw the clustering tree using the SNP site with non-zero coverage for all samples
'
inputdef='
input_1::vcf(.gz) file:*.vcf,*.vcf.gz
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_q:GQ threshold:10
opt_d:DP threshold:4
opt_r:maximum SNPs to draw a tree:100000

'
runcmd="$0 -c #opt_c# -m #opt_m# -q #opt_q# -d #opt_d# -r #opt_r# #input_1#"

export IM_BASE="c2997108/centos7:1-trinity_2.8.5-kallisto_0.46.0-blast_2.9.0-trinotate-3.1.1-R_6-kegg_4"
export IM_R="c2997108/centos7:1-trinity_2.8.5-kallisto_0.46.0-blast_2.9.0-trinotate-3.1.1-R_6-kegg_4"


source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail


#decompress input files
if [ `echo "$input_1"|grep "[.]gz$"|wc -l||true` = 1 ]; then DO_BASE gzip -dc "$input_1" > `echo "$input_1"|sed 's/[.]gz$//'`; input_1=`echo "$input_1"|sed 's/[.]gz$//'`; fi

vcf="$input_1"
out="`basename $input_1` .vcf"

cat $vcf |grep -v "^##"|awk -v gq=$opt_q -v dp=$opt_d -F'\t' '
 {ORS="\t"; print $1"\t"$2"\t"$4"\t"$5"\t"$6"\t"$8;
  if(NR>1){split($9,arr,":"); ngq=0; ndp=0; for(i in arr){if(arr[i]=="DP"){ndp=i}else if(arr[i]=="GQ"){ngq=i}}};
  for(i=10;i<=NF;i++){split($i,arr,":"); if(NR==1){print $i}else{if((ngq==0||arr[ngq]>=gq)&&(ndp==0||arr[ndp]>=dp)){print arr[1]}else{print "./."}}}; ORS="\n"; print ""
 }'|sed 's/\t$//'|awk -F'\t' '{n=0;for(i=7;i<=NF;i++){if($i=="./."){n++}}; if(n<NF-6){print $0}}' > output.tsv
if [ `cat output.tsv|wc -l` -lt 1000000 ]; then
 DO_BASE java -jar /usr/local/bin/excel2.jar output.tsv output.xlsx
fi

grep -v "[.]/[.]" output.tsv |awk -F'\t' '
 NR==1{ORS="\t"; print $1":"$2":"$3":"$4; for(i=7;i<=NF;i++){print $i}; ORS="\n"; print ""}
 NR>1{ORS="\t"; print $1":"$2":"$3":"$4; for(i=7;i<=NF;i++){split($i,arr2,"/"); if(arr2[1]>1){arr2[1]=1}; if(arr2[2]>1){arr2[2]=1}; print arr2[1]+arr2[2]}; ORS="\n"; print ""}
'|sed 's/\t$//' > output.nonNA.txt
cut -f 2- output.nonNA.txt > output.nonNA.tsv

w=`head -n 1 output.tsv|awk -F'\t' '{if((NF-6)/10<8){print 8}else{print (NF-6)/10}}'`
h=`head -n 1 output.tsv|awk -F'\t' '{if((NF-6)/10<8){print 4}else{print (NF-6)/20}}'`
w2=`head -n 1 output.tsv|awk -F'\t' '{if((NF-6)<50){print 500}else{print (NF-6)*10}}'`
h2=`head -n 1 output.tsv|awk -F'\t' '{if((NF-6)<50){print 500}else{print 500+(NF-6)*2}}'`

echo "a=read.table('output.nonNA.tsv',sep='\t',header=T)
c=cor(a); for(i in 1:ncol(c)){c[is.na(c[,i]),i]=0}; result=hclust(as.dist(1-c),'ave')
pdf('sample-relation-nonNA.pdf',width=$w, height=$h, pointsize=2)
plot(result)
dev.off()
library(Cairo)
CairoPNG('sample-relation-nonNA.png',width=min($w2,4000), height=min($h2,2000))
plot(result)
dev.off()
" > make-sample-relation-nonNA.R

DO_R R --vanilla < make-sample-relation-nonNA.R

cat output.tsv|awk -F'\t' '{
 if(NR==1){ORS=""; print "id"; for(i=10;i<=NF;i++){print "\t"$i}}
 else{print $1":"$2":"$3":"$4;
  for(i=10;i<=NF;i++){
   if($i=="1/1"||$i=="1|1"){print "\t2"}
   else if($i=="0/1"||$i=="0|1"||$i=="1|0"){print "\t1"}
   else if($i=="0/0"||$i=="0|0"){print "\t0"}
   else{print "\t-1"}
  }
 };
 print "\n"}' > output.tsv2
head -n $opt_r output.tsv2 > output.tsv3
awk -F'\t' 'NR==1{print $0} NR>1{
 a=0; b=0;
 for(i=2;i<=NF;i++){if($i!=-1){a++; if($i==1){b++}}};
 if(a/(NF-1)>0.8){print $0}
}' output.tsv2 > output.u20pNA.txt
head -n $opt_r output.u20pNA.txt > output.u20pNA.tsv3

echo "library(snowfall)
sfInit(parallel = TRUE, cpus = $N_CPU)
a=read.table('output.u20pNA.tsv3', sep='\t', header=T, row.names=1);
a=t(a)
sfExportAll()
a2=sfApply(a,c(1,2),function(x){if(x==-1){NA}else{x}})
revphase=function(x){if(is.na(x)){NA}else if(x==0){2}else if(x==2){0}else{x}}
calcdist2=function(x, y){x2=lapply(x,revphase); min(length(x[x!=y]),length(x[x2!=y]))}
imax=(dim(a2)[1]);
numsnp=dim(a2)[2];
sfExportAll()
amat=sfApply(a2[1:imax,],1,function(x){apply(a2[1:imax,],1,function(y){calcdist2(x,y)})})
amat=amat/numsnp*100
adist=as.dist(amat)
library(Cairo)
library(dendextend)
dend <- as.dendrogram(hclust(adist,method='ave'))
CairoPNG('sample-relation-u20pNA.png',width=min($w2,4000),height=min($h2,2000))
plot(dend)
dev.off()
write.table(labels(dend),file='tree-labels.u20pNA.txt',sep='\t',quote=F)
" > make-sample-relation-u20pNA.R

DO_R R --vanilla < make-sample-relation-u20pNA.R

echo "library(snowfall)
sfInit(parallel = TRUE, cpus = $N_CPU)
a=read.table('output.tsv3', sep='\t', header=T, row.names=1);
a=t(a)
sfExportAll()
a2=sfApply(a,c(1,2),function(x){if(x==-1){NA}else{x}})
revphase=function(x){if(is.na(x)){NA}else if(x==0){2}else if(x==2){0}else{x}}
calcdist2=function(x, y){x2=lapply(x,revphase); min(length(x[x!=y]),length(x[x2!=y]))}
imax=(dim(a2)[1]);
numsnp=dim(a2)[2];
sfExportAll()
amat=sfApply(a2[1:imax,],1,function(x){apply(a2[1:imax,],1,function(y){calcdist2(x,y)})})
amat=amat/numsnp*100
adist=as.dist(amat)
library(Cairo)
library(dendextend)
dend <- as.dendrogram(hclust(adist,method='ave'))
CairoPNG('sample-relation-all.png',width=min($w2,4000),height=min($h2,2000))
plot(dend)
dev.off()
write.table(labels(dend),file='tree-labels.all.txt',sep='\t',quote=F)
" > make-sample-relation-all.R

DO_R R --vanilla < make-sample-relation-all.R


post_processing

#<option detail>
#</option detail>
