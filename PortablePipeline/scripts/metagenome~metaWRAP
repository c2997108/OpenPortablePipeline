#!/bin/bash

explanation='
MetaWRAP binning pipeline
'
inputdef='
input_1:directory:paired-end FASTQ(.gz) files:*.fastq,*.fq,*.fastq.gz,*.fq.gz
input_2::reference genome file:*.fa,*.fasta,*.fsa,*.fna,*.fa.gz,*.fasta.gz,*.fsa.gz,*.fna.gz
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_b:MetaWRAP binning option:--metabat2 --concoct
opt_r:MetaWRAP bin_refinement option:-A INITIAL_BINNING/metabat2_bins/ -B INITIAL_BINNING/concoct_bins/ -c 50 -x 10
'
runcmd="$0 -c #opt_c# -m #opt_m# -b #opt_b# -i #opt_i# -p #opt_p# -r #opt_r# #input_1# #input_2#"

export IM_METAWRAP="c2997108/centos7:2-metawrap_2"
export IM_CHECKM="quay.io/biocontainers/checkm-genome:1.1.3--py_1"
export IM_SAMTOOLS="biocontainers/samtools:v1.7.0_cv4"
export IM_R="c2997108/ubuntu20:R-2"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail

r1="`find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q$' || echo ''`"
r1gz="`find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q[.]gz$' || echo ''`"

if [ "$r1$r1gz" = "" ]; then echo Place paired-end fastq.gz files in this folder; post_processing; fi


r2=$(for i in $r1; do
 if [ `echo $i|egrep "_1[.]f(ast|)q$"|wc -l||true` = 1 ]; then
  echo $i|sed 's/_1[.]f\(ast\|\)q/_2.f\1q/';
 else
  echo $i|sed 's/_R1/_R2/'
 fi
done)
r2gz=$(for i in $r1gz; do
 if [ `echo $i|egrep "_1[.]f(ast|)q[.]gz$"|wc -l||true` = 1 ]; then
  echo $i|sed 's/_1[.]f\(ast\|\)q[.]gz/_2.f\1q.gz/';
 else
  echo $i|sed 's/_R1/_R2/'
 fi
done)

echo "#Check paired-end"
ls $r2 $r2gz > /dev/null

#decompress input files
if [ `echo "$input_2"|grep "[.]gz$"|wc -l||true` = 1 ]; then DO_BASE gzip -dc "$input_2" > `echo "$input_2"|sed 's/[.]gz$//'`; input_2=`echo "$input_2"|sed 's/[.]gz$//'`; fi

mkdir -p input_fastq
(for i in $r1; do
 if [ `echo $i|egrep "_1[.]f(ast|)q$"|wc -l||true` = 1 ]; then
  j=`echo $i|sed 's/_1[.]f\(ast\|\)q/_2.f\1q/'`;
  i2=`basename $i|sed 's/[.]\(fastq\|fq\)//'`
  j2=`basename $j|sed 's/[.]\(fastq\|fq\)//'`
 else
  j=`echo $i|sed 's/_R1/_R2/'`
  i2=`basename $i|sed 's/_R1.*//'`_1
  j2=`basename $i|sed 's/_R1.*//'`_2
 fi
 ln -sf `readlink -f "$i"` input_fastq/$i2.fastq
 ln -sf `readlink -f "$j"` input_fastq/$j2.fastq
done
for i in $r1gz; do
 if [ `echo $i|egrep "_1[.]f(ast|)q[.]gz$"|wc -l||true` = 1 ]; then
  j=`echo $i|sed 's/_1[.]f\(ast\|\)q[.]gz/_2.f\1q.gz/'`;
  i2=`basename $i .gz|sed 's/[.]\(fastq\|fq\)//'`
  j2=`basename $j .gz|sed 's/[.]\(fastq\|fq\)//'`
 else
  j=`echo $i|sed 's/_R1/_R2/'`
  i2=`basename $i .gz|sed 's/_R1.*//'`_1
  j2=`basename $i .gz|sed 's/_R1.*//'`_2
 fi
 echo zcat $i ">" input_fastq/$i2.fastq
 echo zcat $j ">" input_fastq/$j2.fastq
done)|DOPARALLELONE

WAITPARALLEL


echo 'set -x
source /usr/local/metaWRAP/bashrc
conda activate metawrap-env
metawrap binning -o INITIAL_BINNING -t '$N_CPU' -a '"$input_2"' '"$opt_b"' input_fastq/*.fastq
metawrap bin_refinement -o BIN_REFINEMENT -t '$N_CPU' '"$opt_r"'
metawrap quant_bins -b BIN_REFINEMENT/metawrap_*_*_bins -o QUANT_BINS -t '$N_CPU' -a '"$input_2"' input_fastq/*.fastq
' > run_script.sh

DO_METAWRAP bash run_script.sh
k=`ls -d BIN_REFINEMENT/metawrap_*_*_bins|head -n 1`
DO_CHECKM checkm lineage_wf -t $N_CPU --pplacer_threads $N_CPU -x fa $k output_checkM > output_checkM.txt

DO_SAMTOOLS samtools faidx "$input_2"
mkdir -p script
mkdir -p images
echo '<html><head></head><body>' > bin_tpm-length-graph.html
for i in QUANT_BINS/quant_files/*.quant.counts; do
 j=`basename $i .quant.counts`;
 echo 'library(data.table); a=fread("'"$input_2"'.fai", sep="\t", data.table=F)
b=fread("QUANT_BINS/quant_files/'"$j"'.quant.counts", sep="\t", header=T, data.table=F)
c=fread("'"$k"'.contigs", sep="\t", data.table=F)
a=a[,1:2]
d=merge(c, a, by.x=1, by.y=1, all=T)
e=merge(d,b,by.x=1,by.y=1)

library(Cairo)
j="'"$j"'"
for(i in unique(e[,2])){
 CairoPNG(paste("images",paste(j,i,"png",sep="."),sep="/"))
 f=e[e[,2]==i,]
 plot(main=paste(i,j), x=e[,4], y=e[,3], xlab="TPM", ylab="contig length [bp]", log="xy", pch = ".", cex = 0.1, xlim=c(min(e[e[,4]!=0,4]),max(e[,4])), ylim=c(min(e[,3]),max(e[,3])))
 par(new=T)
 plot(main="",x=f[,4], y=f[,3], xlab="", ylab="", log="xy", pch = ".", cex = 0.1, col="red", xlim=c(min(e[e[,4]!=0,4]),max(e[,4])), ylim=c(min(e[,3]),max(e[,3])))
 dev.off()
}
' > script/"$j".R
 echo $ENV_R Rscript script/"$j".R
 for m in `cat $k.contigs|cut -f 2|sort -V|uniq`; do
  echo '<img src="'"images/$j.$m.png"'">' >> bin_tpm-length-graph.html
 done
done|DOPARALLELONE

WAITPARALLEL

echo '</body></html>' >> bin_tpm-length-graph.html

post_processing

#<option detail>
#<opt_b>
Options:

        -a STR          metagenomic assembly file
        -o STR          output directory
        -t INT          number of threads (default=1)
        -m INT          amount of RAM available (default=4)
        -l INT          minimum contig length to bin (default=1000bp). Note: metaBAT will default to 1500bp minimum

        --metabat2      bin contigs with metaBAT2
        --metabat1      bin contigs with the original metaBAT
        --maxbin2       bin contigs with MaxBin2
        --concoct       bin contigs with CONCOCT

        --universal     use universal marker genes instead of bacterial markers in MaxBin2 (improves Archaea binning)
        --run-checkm    immediately run CheckM on the bin results (requires 40GB+ of memory)
        --single-end    non-paired reads mode (provide *.fastq files)
        --interleaved   the input read files contain interleaved paired-end reads
#</opt_b>
#<opt_r>
Options:

        -o STR          output directory
        -t INT          number of threads (default=1)
        -m INT          memory available (default=40)
        -c INT          minimum % completion of bins [should be >50%] (default=70)
        -x INT          maximum % contamination of bins that is acceptable (default=10)

        -A STR          folder with metagenomic bins (files must have .fa or .fasta extension)
        -B STR          another folder with metagenomic bins
        -C STR          another folder with metagenomic bins

        --skip-refinement       dont use binning_refiner to come up with refined bins based on combinations of binner outputs
        --skip-checkm           dont run CheckM to assess bins
        --skip-consolidation    choose the best version of each bin from all bin refinement iteration
        --keep-ambiguous        for contigs that end up in more than one bin, keep them in all bins (default: keeps them only in the best bin)
        --remove-ambiguous      for contigs that end up in more than one bin, remove them in all bins (default: keeps them only in the best bin)
        --quick                 adds --reduced_tree option to checkm, reducing runtime, especially with low memory
#</opt_r>
#</option detail>

