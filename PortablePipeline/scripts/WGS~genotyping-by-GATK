#!/bin/bash

explanation='
genotyping by GATK
This pipeline is intended to analyze more than 100 samples and execute jobs that use only one core in parallel.
'
inputdef='
input_1:directory:paired-end FASTQ(.gz) files:*.fastq,*.fq,*.fastq.gz,*.fq.gz
input_2::reference genome file:*.fa,*.fasta,*.fsa,*.fna,*.fa.gz,*.fasta.gz,*.fsa.gz,*.fna.gz
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_b:bwa mem option:
'
runcmd="$0 -c #opt_c# -m #opt_m# -b #opt_b# #input_1# #input_2#"

export IM_PICARD="quay.io/biocontainers/picard:2.18.27--0"
export IM_BASE="c2997108/centos7:1-trinity_2.8.5-kallisto_0.46.0-blast_2.9.0-trinotate-3.1.1-R_4-kegg_4"
export IM_BWA="quay.io/biocontainers/bwa:0.7.17--pl5.22.0_1"
export IM_SAMTOOLS="biocontainers/samtools:v1.7.0_cv4"
export IM_GATK="quay.io/biocontainers/gatk4:4.1.0.0--0"
export IM_TRINITY="quay.io/biocontainers/trinity:2.8.4--py36pl526h447964c_0"
export IM_EXONERATE="quay.io/biocontainers/exonerate:2.2.0--1"

source $(dirname `readlink -f $0`)/common.sh

set -eux
set -o pipefail


if [ `echo "$input_2"|grep "[.]gz$"|wc -l||true` = 1 ]; then DO_BASE gzip -d "$input_2"; input_2=`echo "$input_2"|sed 's/[.]gz$//'`; fi
refbase=`echo "$input_2"|sed 's/[.]\(fa\|fasta\|fsa\|fna\)$//'`
if [ -e "$refbase".dict ]; then DO_PICARD rm -f "$refbase".dict; fi
DO_PICARD picard CreateSequenceDictionary R="$input_2" O="$refbase".dict
DO_SAMTOOLS samtools faidx "$input_2"

DO_TRINITY /usr/local/opt/trinity-2.8.4/util/support_scripts/fasta_to_tab.pl "$input_2" > "$input_2".tab
awk '{print length($NF)"\t"$1"\t"$NF}' "$input_2".tab |sort -nr|awk '{if($1>1000*1000){print ">"$2; print $3; print $2"\t"$2"\t1\t"$1 > "pseudochr.txt"}else{if(n==0 || n>10*1000*1000){m++; n=1; print ">pseudochr"m}else{n+=200*50; for(i=0;i<200;i++){print "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN"}}; print $3; print $2"\tpseudochr"m"\t"n"\t"n+$1-1 > "pseudochr.txt"; n+=$1}}' > pseudochr.fa
cat pseudochr.txt |awk '{print $2"\t"$3-1"\t"$4"\t"$1"\t0\t+"}' > pseudochr.bed
DO_EXONERATE fastareformat pseudochr.fa > pseudochr.re.fa
rm -f pseudochr.fa
DO_SAMTOOLS samtools faidx pseudochr.re.fa
DO_BWA bwa index pseudochr.re.fa
if [ -e pseudochr.re.dict ]; then DO_PICARD rm -f pseudochr.re.dict; fi
DO_PICARD picard CreateSequenceDictionary R=pseudochr.re.fa O=pseudochr.re.dict

ref=pseudochr.re.fa
MEMG=`echo ${N_MEM}|awk -v N_CPU=$N_CPU '{print int($1/1024/1024/N_CPU*0.8)}'`
mkdir -p output.bwa
for i in `find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q(|[.]gz)$'`; do
 if [ `echo $i|egrep "_1[.]f(ast|)q(|[.]gz)$"|wc -l` = 1 ]; then
  i2=`echo $i|sed 's/_1[.]f\(ast\|\)q/_2.f\1q/'`;
 else
  i2=`echo $i|sed 's/_R1/_R2/'`;
 fi
 outbase=output.bwa/`basename $i|sed 's/_1[.]f.*//'|sed 's/_R1.*//'`;
 samplename=`basename $i|sed 's/_1[.]f.*//'|sed 's/_R1.*//'`;
 echo "$ENV_BWA bwa mem $opt_b -t 1 -R \'@RG\\\tID:$samplename\\\tSM:$samplename\\\tLB:library\' \'$ref\' \'$i\' \'$i2\' | $ENV_SAMTOOLS samtools sort -@ 1 -o \'$outbase\'.bam; $ENV_SAMTOOLS samtools index \'$outbase\'.bam; $ENV_GATK gatk --java-options \'-Xmx${MEMG}g -XX:ParallelGCThreads=1\' HaplotypeCaller -R \'$ref\' -I \'$outbase\'.bam -O \'$outbase\'.g.vcf.gz -ERC GVCF"
done | DOPARALLELONE

WAITPARALLEL

ls output.bwa/*.g.vcf.gz > gvcf.list.txt
cat gvcf.list.txt |sed 's%output.bwa/%%; s/.g.vcf.gz//' > gvcf.list.txt2
paste gvcf.list.txt2 gvcf.list.txt > gvcf.list.txt3
mkdir -p output.gatk
for i in `cat $ref.fai |cut -f 1`; do
 if [ -e output.gatk/genomicsdb.$i ]; then DO_GATK rm -rf output.gatk/genomicsdb.$i; fi
 echo "$ENV_GATK gatk --java-options \'-Xmx${MEMG}g -XX:ParallelGCThreads=1\' GenomicsDBImport --genomicsdb-workspace-path output.gatk/genomicsdb.$i --batch-size 5 -L $i --sample-name-map gvcf.list.txt3 --reader-threads 1; $ENV_GATK gatk --java-options \'-Xmx${MEMG}g -XX:ParallelGCThreads=1\' GenotypeGVCFs -R $ref -O output.gatk/out.$i.vcf.gz -V gendb://output.gatk/genomicsdb.$i -L $i"
done | DOPARALLELONE

WAITPARALLEL

DO_GATK rm -rf output.gatk/genomicsdb.*

(DO_BASE zcat output.gatk/out.`head -n 1 pseudochr.re.fa.fai |cut -f 1`.vcf.gz|grep "^##"|grep -v "^##contig=<ID=";
 awk -F'\t' 'FILENAME==ARGV[1]{len[$1]=$2} FILENAME==ARGV[2]{print "##contig=<ID="$1",length="len[$1]">"}' "$input_2".fai pseudochr.txt;
 (DO_BASE zcat output.gatk/out.`head -n 1 pseudochr.re.fa.fai |cut -f 1`.vcf.gz;
  for i in `tail -n+2 pseudochr.re.fa.fai |cut -f 1`; do DO_BASE zcat output.gatk/out.$i.vcf.gz|grep -v "^#"; done
 )|grep -v "^##"|awk -F'\t' '
    FILENAME==ARGV[1]{chr0[NR]=$1; chr1[NR]=$2; poss[NR]=$3; pose[NR]=$4; n=NR; m=1}
    FILENAME==ARGV[2]{if(FNR==1){print $0}else{for(i=m;i<=n;i++){m=i; if(chr1[i]==$1 && poss[i]<=$2 && pose[i]>=$2){f=1; break}}; if(f==1){$1=chr0[m]; $2=$2-poss[m]+1; OFS="\t"; print $0; f=0}}}
   ' pseudochr.txt /dev/stdin
) > all.re.vcf


post_processing

#<option detail>
#<opt_b>
Algorithm options:

       -t INT        number of threads [1]
       -k INT        minimum seed length [19]
       -w INT        band width for banded alignment [100]
       -d INT        off-diagonal X-dropoff [100]
       -r FLOAT      look for internal seeds inside a seed longer than {-k} * FLOAT [1.5]
       -y INT        seed occurrence for the 3rd round seeding [20]
       -c INT        skip seeds with more than INT occurrences [500]
       -D FLOAT      drop chains shorter than FLOAT fraction of the longest overlapping chain [0.50]
       -W INT        discard a chain if seeded bases shorter than INT [0]
       -m INT        perform at most INT rounds of mate rescues for each read [50]
       -S            skip mate rescue
       -P            skip pairing; mate rescue performed unless -S also in use

Scoring options:

       -A INT        score for a sequence match, which scales options -TdBOELU unless overridden [1]
       -B INT        penalty for a mismatch [4]
       -O INT[,INT]  gap open penalties for deletions and insertions [6,6]
       -E INT[,INT]  gap extension penalty; a gap of size k cost '{-O} + {-E}*k' [1,1]
       -L INT[,INT]  penalty for 5'- and 3'-end clipping [5,5]
       -U INT        penalty for an unpaired read pair [17]

       -x STR        read type. Setting -x changes multiple parameters unless overriden [null]
                     pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref)
                     ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref)
                     intractg: -B9 -O16 -L5  (intra-species contigs to ref)
#</opt_b>
#</option detail>

