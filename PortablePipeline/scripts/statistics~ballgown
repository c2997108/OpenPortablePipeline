#!/bin/bash

explanation='
ballgown analysis
'
inputdef='
input_1::isoform count table:*
input_2::gene count table:*
input_3::sample list:*
input_4:directory:ballgown input:*.stringtie.tar.gz
input_5:optional:Trinotate added isoform count table:*
input_6:optional:Trinotate added gene count table:*
'
optiondef='
opt_i:group 1 name (should be the same one in the sample list):
opt_j:group 2 name (should be the same one in the sample list):
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_s:script name:run-ballgown.R
opt_p:p:0.05
opt_f:the directory of extracted ballgown input files:
'
runcmd="$0 -c #opt_c# -m #opt_m# -s #opt_s# -i #opt_i# -j #opt_j# -p #opt_p# -a #input_5# -b #input_6# -f #opt_f# #input_1# #input_2# #input_3# #input_4#"

export IM_R="c2997108/centos7:1-trinity_2.8.5-kallisto_0.46.0-blast_2.9.0-trinotate-3.1.1-R_4-kegg_4"

source $(dirname `readlink -f $0`)/common.sh

set -eux
set -o pipefail


input_5=${opt_a:-}
input_6=${opt_b:-}
script=$opt_s
inputsamplematrix=$input_3
inputmatrix=$input_1
inputgenematrix=$input_2
g1=$opt_i
g2=$opt_j
if [ "$g1" = "" ]; then g1=`tail -n+2 $inputsamplematrix|cut -f 2|sort -V|uniq|head -n 1`; fi
if [ "$g2" = "" ]; then g2=`tail -n+2 $inputsamplematrix|cut -f 2|sort -V|uniq|head -n 2|tail -n 1`; fi
p=$opt_p
outputfile=ballgown.`basename $inputmatrix`
samplex=ballgown.`basename $inputsamplematrix`.x
sampley=ballgown.`basename $inputsamplematrix`.y
outputfilexup=result.ballgown.`basename $inputmatrix`.$g1.up.$g2.down.txt
outputfileyup=result.ballgown.`basename $inputmatrix`.$g1.down.$g2.up.txt
outputgenefile=ballgown.`basename $inputgenematrix`
outputgenefilexup=result.ballgown.`basename $inputgenematrix`.$g1.up.$g2.down.txt
outputgenefileyup=result.ballgown.`basename $inputgenematrix`.$g1.down.$g2.up.txt
if [ "$input_5" = "" ]; then
 touch dummy.annotation.txt
 annotationfile=dummy.annotation.txt
else
 annotationfile=${input_5}
fi
if [ "$input_6" = "" ]; then
 touch dummy.annotationgene.txt
 annotationgenefile=dummy.annotationgene.txt
else
 annotationgenefile=${input_6}
fi
if [ "$opt_f" = "" ]; then
 mkdir -p input.ballgown.extract.$g1.$g2
 for i in $input_4/*.stringtie.tar.gz; do tar zvxf $i -C input.ballgown.extract.$g1.$g2; done
else
 ln -s "$opt_f" input.ballgown.extract.$g1.$g2
fi

awk -F'\t' -v g1="$g1" -v g2="$g2" '{if(NR==1){print $0}else{OFS="\t"; if($2==g1){$2=1}else if($2==g2){$2=2}; print $0}}' $inputsamplematrix > $inputsamplematrix.num

cat << EOF > $script
library(ballgown)
pheno_data = read.table(file ="$inputsamplematrix.num", header = TRUE, sep = "\\t")
sample_full_path = paste("input.ballgown.extract.$g1.$g2",pheno_data[,1], sep = '/')
bg2 = ballgown(samples=as.vector(sample_full_path),pData=pheno_data)
results_genes = stattest(bg2, feature="gene", covariate="condition", getFC=TRUE, meas="FPKM")
c=results_genes[!is.na(results_genes[,4]),]
results_genes_t = stattest(bg2, feature="transcript", covariate="condition", getFC=TRUE, meas="FPKM")
whole_tx_table = texpr(bg2, 'all')
aa=merge(results_genes_t,whole_tx_table,by.x=c("id"),by.y=c("t_id"))
d=aa[!is.na(aa[,4]),]
res=cbind(d\$t_name,d\$qval,d\$fc)
res=res[res[,2]<$p,]
colnames(res)=c("id","qval","fc")
resgene=cbind(as.character(c\$id),c\$qval,c\$fc)
resgene=resgene[resgene[,2]<$p,]
colnames(resgene)=c("id","qval","fc")
write.table(res,file="$outputfile",sep="\\t",row.names=F,quote=F)
write.table(resgene,file="$outputgenefile",sep="\\t",row.names=F,quote=F)

EOF

DO_R R --vanilla < $script || true
if [ ! -e "$outputfile" ]; then touch "$outputfile"; fi
if [ ! -e "$outputgenefile" ]; then touch "$outputgenefile"; fi
tail -n+2 $outputfile|cut -f 1 > $outputfile.id
awk -F'\t' -v g1=$g1 '$2==g1{print $1}' $inputsamplematrix > $samplex
awk -F'\t' -v g2=$g2 '$2==g2{print $1}' $inputsamplematrix > $sampley
bash "$scriptdir"/statistics~scatter_with_variance -x $g1 -y $g2 $inputmatrix $outputfile.id $samplex $sampley
tail -n+2 $outputfile|awk '{if($3<=1){print $1"\tx"}else{print $1"\ty"}}' > $outputfile.xy
cut -f 1,2 $outputfile| awk -F'\t' 'NR==1{print -1"\t"$0} NR>1{print $2"\t"$0}'|sort -k1,1g|cut -f 2- > $outputfile.p
awk -F'\t' 'FILENAME==ARGV[1]{xy[$1]=$2} FILENAME==ARGV[2]{if(FNR==1){header=$0}; res[$1]=$0} FILENAME==ARGV[3]{if(FNR==1){print header"\t"$2}else{if(xy[$1]=="x"){print res[$1]"\t"$2}}}' $outputfile.xy $annotationfile $outputfile.p > $outputfilexup
awk -F'\t' 'FILENAME==ARGV[1]{xy[$1]=$2} FILENAME==ARGV[2]{if(FNR==1){header=$0}; res[$1]=$0} FILENAME==ARGV[3]{if(FNR==1){print header"\t"$2}else{if(xy[$1]=="y"){print res[$1]"\t"$2}}}' $outputfile.xy $annotationfile $outputfile.p > $outputfileyup
i=$outputfilexup; awk -F'\t' -v maxlen=30000 'FILENAME==ARGV[1]{for(i=1;i<=NF;i++){n=int((length($i)-1)/maxlen)+1; if(n>a[i]){a[i]=n}}} FILENAME==ARGV[2]{if(FNR==1){ORS=""; for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print $i" (split "j")\t"}}}; print "\n"}else{for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print substr($i,(j-1)*maxlen+1,maxlen)"\t" }}}; print "\n"}}' $i ./$i|sed 's/\t$//' > ${i}.temp
i=$outputfileyup; awk -F'\t' -v maxlen=30000 'FILENAME==ARGV[1]{for(i=1;i<=NF;i++){n=int((length($i)-1)/maxlen)+1; if(n>a[i]){a[i]=n}}} FILENAME==ARGV[2]{if(FNR==1){ORS=""; for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print $i" (split "j")\t"}}}; print "\n"}else{for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print substr($i,(j-1)*maxlen+1,maxlen)"\t" }}}; print "\n"}}' $i ./$i|sed 's/\t$//' > ${i}.temp
DO_R java -Xmx1G -jar /usr/local/bin/excel2.jar ${outputfilexup}.temp $outputfilexup.xlsx
DO_R java -Xmx1G -jar /usr/local/bin/excel2.jar ${outputfileyup}.temp $outputfileyup.xlsx

tail -n+2 $outputgenefile|cut -f 1 > $outputgenefile.id
bash "$scriptdir"/statistics~scatter_with_variance -x $g1 -y $g2 $inputgenematrix $outputgenefile.id $samplex $sampley
tail -n+2 $outputgenefile|awk '{if($3<=1){print $1"\tx"}else{print $1"\ty"}}' > $outputgenefile.xy
cut -f 1,2 $outputgenefile| awk -F'\t' 'NR==1{print -1"\t"$0} NR>1{print $2"\t"$0}'|sort -k1,1g|cut -f 2- > $outputgenefile.p
awk -F'\t' 'FILENAME==ARGV[1]{xy[$1]=$2} FILENAME==ARGV[2]{if(FNR==1){header=$0}; res[$1]=$0} FILENAME==ARGV[3]{if(FNR==1){print header"\t"$2}else{if(xy[$1]=="x"){print res[$1]"\t"$2}}}' $outputgenefile.xy $annotationgenefile $outputgenefile.p > $outputgenefilexup
awk -F'\t' 'FILENAME==ARGV[1]{xy[$1]=$2} FILENAME==ARGV[2]{if(FNR==1){header=$0}; res[$1]=$0} FILENAME==ARGV[3]{if(FNR==1){print header"\t"$2}else{if(xy[$1]=="y"){print res[$1]"\t"$2}}}' $outputgenefile.xy $annotationgenefile $outputgenefile.p > $outputgenefileyup
i=$outputgenefilexup; awk -F'\t' -v maxlen=30000 'FILENAME==ARGV[1]{for(i=1;i<=NF;i++){n=int((length($i)-1)/maxlen)+1; if(n>a[i]){a[i]=n}}} FILENAME==ARGV[2]{if(FNR==1){ORS=""; for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print $i" (split "j")\t"}}}; print "\n"}else{for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print substr($i,(j-1)*maxlen+1,maxlen)"\t" }}}; print "\n"}}' $i ./$i|sed 's/\t$//' > ${i}.temp
i=$outputgenefileyup; awk -F'\t' -v maxlen=30000 'FILENAME==ARGV[1]{for(i=1;i<=NF;i++){n=int((length($i)-1)/maxlen)+1; if(n>a[i]){a[i]=n}}} FILENAME==ARGV[2]{if(FNR==1){ORS=""; for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print $i" (split "j")\t"}}}; print "\n"}else{for(i=1;i<=NF;i++){if(a[i]<=1){print $i"\t"}else{for(j=1;j<=a[i];j++){print substr($i,(j-1)*maxlen+1,maxlen)"\t" }}}; print "\n"}}' $i ./$i|sed 's/\t$//' > ${i}.temp
DO_R java -Xmx1G -jar /usr/local/bin/excel2.jar ${outputgenefilexup}.temp $outputgenefilexup.xlsx
DO_R java -Xmx1G -jar /usr/local/bin/excel2.jar ${outputgenefileyup}.temp $outputgenefileyup.xlsx

rm -rf input.ballgown.extract.$g1.$g2
rm -f $outputfile.id $samplex $sampley $outputfile.xy $outputfile.p $outputfilexup.temp $outputfileyup.temp
rm -f $outputgenefile.id $outputgenefile.xy $outputgenefile.p $outputgenefilexup.temp $outputgenefileyup.temp


post_processing


#<option detail>
#</option detail>

