#!/bin/bash

explanation='
Clustering with Pearson correlation
'
inputdef='
input_1::Expression table (e.g. FPKM, RPM, TPM) with gene name (row) and sample name (column):*
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_r:Threshold of Pearson correlation coefficient:0.85
opt_a:Graph width (pixel):600
opt_b:Graph height (pixel):600
opt_t:Transparency of the line:0.4
'
runcmd="$0 -c #opt_c# -m #opt_m# -a #opt_a# -b #opt_b# -r #opt_r# -t #opt_t# #input_1#"

export IM_BASE="c2997108/centos8:1-R-java"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail

ln -sf "$input_1" input.table.txt

echo 'data=read.table("input.table.txt",header=T,row.names=1)
data2=log2(data[order(apply(data,1,sum),decreasing=T),]+1)
data2=data2[apply(data2,1,sum)!=0,]
write.table(data2, "input.table.sorted.log2p1.txt",row.names=T, quote=F, sep="\t")'| (DO_BASE /opt/R/4.0.3/bin/R --vanilla --silent)

DO_BASE awk -F'\t' 'NR==1{print "id\t"$0} NR>1{print $0}' input.table.sorted.log2p1.txt > input.table.sorted.log2p1.h.txt
DO_BASE java -cp /opt corclust.Clustering input.table.sorted.log2p1.h.txt $opt_r $opt_c > input.table.sorted.log2p1.h.txt.clust
paste input.table.sorted.log2p1.h.txt <(echo cluster; cat input.table.sorted.log2p1.h.txt.clust|cut -f 2) > output.table.txt

echo 'data=read.table("input.table.sorted.log2p1.h.txt",header=T,row.names=1)
clust=read.table("input.table.sorted.log2p1.h.txt.clust", row.names=1)
data2=data/apply(data,1,function(x){sqrt(sum(x*x))})

library(Cairo)
library(tidyverse)
for(i in sort(unique(clust[,1]))){
 data3=data2[clust[,1]==i,]
 if(dim(data3)[1]>1){
  CairoPNG(paste("cluster.",i,".png",sep=""),width='$opt_a',height='$opt_b')
  cat(paste("plotting cluster:",i,"...\n"))
  ymin = min(data3)
  ymax = max(data3)
  plot(as.numeric(data3[1,]), type="l", ylim=c(ymin,ymax), col = alpha("lightgray", '$opt_t'), xaxt="n", xlab="", ylab="log2(value+1)/sqrt(sum(log2(value+1)))", main=i)
  axis(side=1, at=1:length(data3[1,]), labels=colnames(data3), las=2)
  for(r in 2:length(data3[,1])) {
   points(as.numeric(data3[r,]), type="l", col=alpha("lightgray",'$opt_t'))
  }
  points(as.numeric(colMeans(data3)), type="o", col="blue")
  dev.off()
 }
}'| (DO_BASE /opt/R/4.0.3/bin/R --vanilla --silent)

rm -f input.table.txt input.table.sorted.log2p1.h.txt input.table.sorted.log2p1.h.txt.clust input.table.sorted.log2p1.txt


post_processing

#<option detail>
#</option detail>

