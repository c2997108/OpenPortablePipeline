#!/bin/bash

explanation='
Cell Ranger for 10x CNV and VarTrix pipeline
'
inputdef='
input_1:directory:10x CNV reads (file names must be like SampleName_S1_L001_R1_001.fastq.gz):*.fastq.gz,*.fq.gz,*.fastq,*.fq
input_2::A reference genome file:*.fa,*.fasta,*.fsa,*.fna,*.fa.gz,*.fasta.gz,*.fsa.gz,*.fna.gz
input_3::The 10x Cell Ranger DNA - 1.1.0 software file (download from https://support.10xgenomics.com/single-cell-dna/software/downloads/latest):cellranger-dna-1.1.0.tar.gz
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_b:cellranger-dna cnv option:
opt_d:Threshold of homo ref/ref vs homo alt/alt rate in vartrix.matrix:0.2
opt_e:Minimum number of ref/ref and alt/alt individuals of each SNP in vartrix.matrix:10
'
runcmd="$0 -c #opt_c# -m #opt_m# -b #opt_b# -d #opt_d# -e #opt_e# #input_1# #input_2# #input_3#"

export IM_SAMTOOLS="quay.io/biocontainers/samtools:1.9--h10a08f8_12"
export IM_SEQKIT="quay.io/biocontainers/seqkit:0.12.1--0"
export IM_EXONERATE="quay.io/biocontainers/exonerate:2.2.0--1"
export IM_BWA="quay.io/biocontainers/bwa:0.7.17--pl5.22.0_1"
export IM_BCF="quay.io/biocontainers/bcftools:1.9--h68d8f2e_7"
export IM_SELDLA="c2997108/seldla:2.1.2_2"
export IM_VARTRIX="c2997108/vartrix:1.1.16"
export IM_BASE="c2997108/centos7:1-trinity_2.8.5-kallisto_0.46.0-blast_2.9.0-trinotate-3.1.1-R_4-kegg_4"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail

#decompress input files
if [ `echo "$input_2"|grep "[.]gz$"|wc -l||true` = 1 ]; then DO_BASE gzip -dc "$input_2" > `echo "$input_2"|sed 's/[.]gz$//'`; input_2=`echo "$input_2"|sed 's/[.]gz$//'`; fi

#r1=`ls -Lr "$input_3"/*.fastq.gz "$input_3"/*.fq.gz "$input_3"/*.fastq "$input_3"/*.fq 2> /dev/null |egrep '(_R1.*|_1)[.]f(ast|)q([.]gz|)$'|head -n 1|| true`
#if [ `echo "$r1"|egrep "[.]gz$"|wc -l||true` = 1 ]; then catcmd="zcat"; else catcmd="cat"; fi
#if [ `echo "$r1"|egrep "_1[.]f(ast|)q([.]gz|)$"|wc -l||true` = 1 ]; then
# r2=`echo "$r1"|sed 's/_1[.]f\(ast\|\)q\([.]gz\|\)/_2.f\1q.gz\2/'`;
#else
# r2=`echo "$r1"|sed 's/_R1/_R2/'`
#fi

#FASTQ check
r1="`find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q$' || echo ''`"
r1gz="`find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q[.]gz$' || echo ''`"
if [ "$r1$r1gz" = "" ]; then echo Place paired-end fastq.gz files in this folder; post_processing; fi

r2=$(for i in $r1; do
 if [ `echo $i|egrep "_1[.]f(ast|)q$"|wc -l||true` = 1 ]; then
  echo $i|sed 's/_1[.]f\(ast\|\)q/_2.f\1q/';
 else
  echo $i|sed 's/_R1/_R2/'
 fi
done)
r2gz=$(for i in $r1gz; do
 if [ `echo $i|egrep "_1[.]f(ast|)q[.]gz$"|wc -l||true` = 1 ]; then
  echo $i|sed 's/_1[.]f\(ast\|\)q[.]gz/_2.f\1q.gz/';
 else
  echo $i|sed 's/_R1/_R2/'
 fi
done)

echo "#Check paired-end"
ls $r2 $r2gz > /dev/null

mkdir -p 10x_input
j=0
for i in $r1; do
 j=`expr $j + 1`;
 k=`printf "%03d" "${j}"`
 if [ `echo $i|egrep "_1[.]f(ast|)q$"|wc -l||true` = 1 ]; then
  i2=`echo $i|sed 's/_1[.]f\(ast\|\)q/_2.f\1q/'`
 else
  i2=`echo $i|sed 's/_R1/_R2/'`
 fi
 ln -s "`readlink -f $i`" 10x_input/input_S1_L${k}_R1_001.fastq
 ln -s "`readlink -f $i2`" 10x_input/input_S1_L${k}_R2_001.fastq
done
for i in $r1gz; do
 j=`expr $j + 1`;
 k=`printf "%03d" "${j}"`
 if [ `echo $i|egrep "_1[.]f(ast|)q[.]gz$"|wc -l||true` = 1 ]; then
  i2=`echo $i|sed 's/_1[.]f\(ast\|\)q[.]gz/_2.f\1q.gz/'`
 else
  i2=`echo $i|sed 's/_R1/_R2/'`
 fi
 ln -s "`readlink -f $i`" 10x_input/input_S1_L${k}_R1_001.fastq.gz
 ln -s "`readlink -f $i2`" 10x_input/input_S1_L${k}_R2_001.fastq.gz
done

ref="$input_2"
DO_SAMTOOLS samtools faidx "$ref"
cat "$ref".fai|sort -k2,2nr|awk 'BEGIN{n=20} {min=cnt[1]; mini=1; for(i=2;i<=n;i++){if(cnt[i]<min){min=cnt[i]; mini=i}}; a[mini][$1]=1; cnt[mini]+=$2} END{for(i=1;i<=n;i++){for(j in a[i]){print j"\t"i}}}' > id
DO_SEQKIT seqkit fx2tab "$ref" > "$ref".tab
awk '{print length($NF)"\t"$1"\t"$NF}' "$ref".tab |sort -nr|awk -v n=8 'BEGIN{sp=""; for(i=0;i<20;i++){sp=sp"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN"}} {min=cnt[1]; mini=1; for(i=2;i<=n;i++){if(cnt[i]<min){min=cnt[i]; mini=i}}; if(seq[mini]!=""){seq[mini]=seq[mini]""sp; cnt[mini]+=20*50}; print $2"\tpseudochr"mini"\t"cnt[mini]+1"\t"cnt[mini]+$1 > "pseudochr.txt"; seq[mini]=seq[mini]""$NF; cnt[mini]+=$1} END{for(i=1;i<=n;i++){print ">pseudochr"i; print seq[i]}}' > pseudochr.fa
DO_EXONERATE fastareformat pseudochr.fa > pseudochr.re.fa
cat pseudochr.txt |awk '{print $2"\t"$3-1"\t"$4"\t"$1"\t0\t+"}' > pseudochr.bed

set +o pipefail
(for i in $r1; do cat $i; done; for i in $r1gz; do DO_SELDLA zcat $i; done)|awk 'FILENAME==ARGV[1]{n+=$2} FILENAME==ARGV[2]{if(FNR%4==1){s1=$0}else if(FNR%4==2){cnt+=length($0)-16; if(cnt>n*50){exit}; s2=substr($0,17)}else if(FNR%4==3){s3=$0}else{print s1; print s2; print s3; print substr($0,17)}}' "$ref".fai /dev/stdin > temp100xtrim_1.fastq
(for i in $r2; do cat $i; done; for i in $r2gz; do DO_SELDLA zcat $i; done)|head -n `cat temp100xtrim_1.fastq|wc -l` > temp100xtrim_2.fastq
set -o pipefail

DO_SAMTOOLS samtools faidx pseudochr.re.fa
DO_BWA bwa index pseudochr.re.fa
DO_BWA bwa mem -t $N_CPU pseudochr.re.fa temp100xtrim_1.fastq temp100xtrim_2.fastq |(DO_SAMTOOLS samtools sort -@ $N_CPU -) > pseudochr.re.fa.100x.bam
DO_SAMTOOLS samtools index pseudochr.re.fa.100x.bam
DO_BCF bcftools mpileup -Ou --annotate AD,DP,INFO/AD -f pseudochr.re.fa pseudochr.re.fa.100x.bam | (DO_BCF bcftools call -vm -f GQ -o pseudochr.re.fa.100x.bam.vcf)


DO_SELDLA tar zvxf "$input_3"
#name=`basename $(echo $r1 $r1gz|awk '{print $1}')|sed 's/[.]gz$//; s/_S._L..._R1_...[.]fastq$//'`
(echo '{"species_prefixes": [""],"primary_contigs": ['; awk '{ORS=""; if(NR!=1){print ","}; print "\""$1"\""}' pseudochr.re.fa.fai; echo '],"sex_chromosomes": {"_male": {"pseudochr1": 2},"_female": {"pseudochr1": 2}},"non_nuclear_contigs": ["chrM"]}' ) > pseudochr.re.fa.json
DO_SELDLA ./cellranger-dna-1.1.0/cellranger-dna mkref pseudochr.re.fa pseudochr.re.fa.json
DO_SELDLA ./cellranger-dna-1.1.0/cellranger-dna cnv --id=10x_output --reference=refdata-pseudochr.re --fastqs="10x_input" $opt_b
cat 10x_output/outs/per_cell_summary_metrics.csv |awk -F, '$16==-2 || ($16>2 && $15<2) {print $1}' > tags.removedup.txt

DO_VARTRIX vartrix_linux --bam 10x_output/outs/possorted_bam.bam --cell-barcodes tags.removedup.txt --fasta pseudochr.re.fa --vcf pseudochr.re.fa.100x.bam.vcf --mapq 5 --out-matrix pseudochr.re.fa.removedup.matrix --out-variants pseudochr.re.fa.removedup.variants --threads $N_CPU
#mut1:ref/ref, mut2:alt/alt, mut3:alt/ref
DO_SELDLA awk -v bal=$opt_d -v min=$opt_e 'NR<=3{print $0} NR>3{if(old!=$1){if(mut1>=bal*mut2 && mut2>=bal*mut1 && mut3<=bal*mut1 && mut3<=bal*mut2 && mut1+mut2>=min){PROCINFO["sorted_in"]="@ind_num_asc"; for(i in data){print data[i]}}; old=$1; mut1=0; mut2=0; mut3=0; delete data}; if($3==1){mut1++}else if($3==2){mut2++}else if($3==3){mut3++}; data[FNR]=$0} END{if(mut1>=bal*mut2 && mut2>=bal*mut1 && mut3<=bal*mut1 && mut3<=bal*mut2 && mut1+mut2>=min){PROCINFO["sorted_in"]="@ind_num_asc"; for(i in data){print data[i]}}}' pseudochr.re.fa.removedup.matrix > pseudochr.re.fa.removedup.matrix.clean
#variants position + 1 = vcf position
awk 'FILENAME==ARGV[1]{var[FNR]=$1; nvar++} FILENAME==ARGV[2]{id[FNR]=$1; nid++} FILENAME==ARGV[3] && FNR>3{ORS=""; if(FNR==4){print "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT"; for(i=1;i<=nid;i++){print "\t"id[i]}; m=nid+1}; if(old!=$1){for(i=m;i<=nid;i++){print "\t-1"}; split(var[$1],arr,"_"); chr=arr[1]; for(ai=2;ai<length(arr);ai++){chr=chr"_"arr[ai]}; pos=arr[length(arr)]; print "\n"chr"\t"pos"\t.\t.\t.\t.\t.\t.\tGT"; m=1; old=$1}; for(i=m;i<$2;i++){print "\t-1"}; if($3==1){print "\t0"}else if($3==2){print "\t2"}else if($3==3){print "\t1"}else{print "\t-1"}; m=$2+1} END{for(i=m;i<=nid;i++){print "\t-1"}; print "\n"}' pseudochr.re.fa.removedup.variants tags.removedup.txt pseudochr.re.fa.removedup.matrix.clean > pseudochr.re.fa.removedup.matrix.clean.txt
awk -F'\t' 'FILENAME==ARGV[1]{chr0[NR]=$1; chr1[NR]=$2; poss[NR]=$3; pose[NR]=$4; n=NR} FILENAME==ARGV[2]{if(FNR==1){print $0}else{for(i=1;i<=n;i++){m=i; if(chr1[i]==$1 && poss[i]<=$2 && pose[i]>=$2){f=1; break}}; if(f==1){OFS="\t"; $1=chr0[m]; $2=$2-poss[m]+1; print $0; f=0}}}' pseudochr.txt pseudochr.re.fa.removedup.matrix.clean.txt > pseudochr.re.fa.removedup.matrix.clean.txt.vcf
awk -F'\t' 'NR==1{OFS="\t"; $9=$9"\tdummy"; print $0} NR>1{$9=$9"\t1"; print $0}' pseudochr.re.fa.removedup.matrix.clean.txt.vcf > pseudochr.re.fa.removedup.matrix.clean.txt_clean.txt
head -n 1 pseudochr.re.fa.removedup.matrix.clean.txt_clean.txt|cut -f 10- > pseudochr.re.fa.removedup.matrix.clean.txt.vcf2.family


post_processing

#<option detail>
#<opt_b>
Options:
# Sample Specification
    --description=TEXT  More detailed sample description.
    --lanes=NUMS        Comma-separated lane numbers.
    --indices=INDICES   Comma-separated sample index set "SI-001" or sequences.
    --project=TEXT      Name of the project folder within a mkfastq or
                            bcl2fastq-generated folder to pick FASTQs from.
# CNV Calling
    --force-cells=N     Define the top N barcodes with the most reads as cells.
                            N must be a positive integer <= 20,000. Please
                            consult the documentation before using this option.
    --soft-min-avg-ploidy=FLOAT
                            Use a known lower limit on the average ploidy of
                            the sample. Please consult the documentation before
                            using this option.
    --soft-max-avg-ploidy=FLOAT
                            Use a known upper limit of the average ploidy of
                            the sample. Please consult the documentation before
                            using this option.
# Downsampling
    --downsample=GB     Downsample input FASTQs to approximately GB gigabases
                            of input sequence.
    --maxreads=NUM      Downsample input FASTQs to approximately NUM
                            single-ended input reads.
# Martian Runtime
    --jobmode=MODE      Job manager to use. Valid options:
                            local (default), sge, lsf, or a .template file
    --localcores=NUM    Set max cores the pipeline may request at one time.
                            Only applies to local jobs.
    --localmem=NUM      Set max GB the pipeline may request at one time.
                            Only applies to local jobs.
    --localvmem=NUM     Set max virtual address space in GB for the pipeline.
                            Only applies to local jobs.
    --mempercore=NUM    Reserve enough threads for each job to ensure enough
                        memory will be available, assuming each core on your
                        cluster has at least this much memory available.
                            Only applies in cluster jobmodes.
    --maxjobs=NUM       Set max jobs submitted to cluster at one time.
                            Only applies in cluster jobmodes.
    --jobinterval=NUM   Set delay between submitting jobs to cluster, in ms.
                            Only applies in cluster jobmodes.
    --overrides=PATH    The path to a JSON file that specifies stage-level
                            overrides for cores and memory.  Finer-grained
                            than --localcores, --mempercore and --localmem.
                            Consult the 10x support website for an example
                            override file.
    --uiport=PORT       Serve web UI at http://localhost:PORT
    --disable-ui        Do not serve the UI.
    --noexit            Keep web UI running after pipestance completes or fails.
    --nopreflight       Skip preflight checks.

    -h --help           Show this message.
    --version           Show version.
#</opt_b>
#</option detail>

