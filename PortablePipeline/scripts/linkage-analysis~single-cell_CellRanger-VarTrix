#!/bin/bash

explanation='
Cell Ranger for 10x CNV and VarTrix pipeline
'
inputdef='
input_1:directory:10x CNV reads:*.fastq.gz,*.fq.gz,*.fastq,*.fq
input_2::A reference genome file:*.fa,*.fasta,*.fsa,*.fna,*.fa.gz,*.fasta.gz,*.fsa.gz,*.fna.gz
input_3::The 10x Cell Ranger DNA - 1.1.0 software file (download from https://support.10xgenomics.com/single-cell-dna/software/downloads/latest):cellranger-dna-1.1.0.tar.gz
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_b:SELDLA option:--mode=crossbreed --DP=1 -r 10000 --cs=2
'
runcmd="$0 -c #opt_c# -m #opt_m# -b #opt_b# #input_1# #input_2# #input_3#"

export IM_SAMTOOLS="quay.io/biocontainers/samtools:1.9--h10a08f8_12"
export IM_SEQKIT="quay.io/biocontainers/seqkit:0.12.1--0"
export IM_EXONERATE="quay.io/biocontainers/exonerate:2.2.0--1"
export IM_BWA="quay.io/biocontainers/bwa:0.7.17--pl5.22.0_1"
export IM_BCF="quay.io/biocontainers/bcftools:1.9--h68d8f2e_7"
export IM_SELDLA="c2997108/seldla:2.1.2_2"
export IM_VARTRIX="c2997108/vartrix:1.1.16"
export IM_BASE="c2997108/centos7:1-trinity_2.8.5-kallisto_0.46.0-blast_2.9.0-trinotate-3.1.1-R_4-kegg_4"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail

#decompress input files
if [ `echo "$input_2"|grep "[.]gz$"|wc -l||true` = 1 ]; then DO_BASE gzip -dc "$input_2" > `echo "$input_2"|sed 's/[.]gz$//'`; input_2=`echo "$input_2"|sed 's/[.]gz$//'`; fi

#r1=`ls -Lr "$input_3"/*.fastq.gz "$input_3"/*.fq.gz "$input_3"/*.fastq "$input_3"/*.fq 2> /dev/null |egrep '(_R1.*|_1)[.]f(ast|)q([.]gz|)$'|head -n 1|| true`
#if [ `echo "$r1"|egrep "[.]gz$"|wc -l||true` = 1 ]; then catcmd="zcat"; else catcmd="cat"; fi
#if [ `echo "$r1"|egrep "_1[.]f(ast|)q([.]gz|)$"|wc -l||true` = 1 ]; then
# r2=`echo "$r1"|sed 's/_1[.]f\(ast\|\)q\([.]gz\|\)/_2.f\1q.gz\2/'`;
#else
# r2=`echo "$r1"|sed 's/_R1/_R2/'`
#fi

#FASTQ check
r1="`find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q$' || echo ''`"
r1gz="`find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q[.]gz$' || echo ''`"
if [ "$r1$r1gz" = "" ]; then echo Place paired-end fastq.gz files in this folder; post_processing; fi

r2=$(for i in $r1; do
 if [ `echo $i|egrep "_1[.]f(ast|)q$"|wc -l||true` = 1 ]; then
  echo $i|sed 's/_1[.]f\(ast\|\)q/_2.f\1q/';
 else
  echo $i|sed 's/_R1/_R2/'
 fi
done)
r2gz=$(for i in $r1gz; do
 if [ `echo $i|egrep "_1[.]f(ast|)q[.]gz$"|wc -l||true` = 1 ]; then
  echo $i|sed 's/_1[.]f\(ast\|\)q[.]gz/_2.f\1q.gz/';
 else
  echo $i|sed 's/_R1/_R2/'
 fi
done)

echo "#Check paired-end"
ls $r2 $r2gz > /dev/null


ref="$input_2"
DO_SAMTOOLS samtools faidx "$ref"
cat "$ref".fai|sort -k2,2nr|awk 'BEGIN{n=20} {min=cnt[1]; mini=1; for(i=2;i<=n;i++){if(cnt[i]<min){min=cnt[i]; mini=i}}; a[mini][$1]=1; cnt[mini]+=$2} END{for(i=1;i<=n;i++){for(j in a[i]){print j"\t"i}}}' > id
DO_SEQKIT seqkit fx2tab "$ref" > "$ref".tab
awk '{print length($NF)"\t"$1"\t"$NF}' "$ref".tab |sort -nr|awk -v n=8 'BEGIN{sp=""; for(i=0;i<20;i++){sp=sp"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN"}} {min=cnt[1]; mini=1; for(i=2;i<=n;i++){if(cnt[i]<min){min=cnt[i]; mini=i}}; if(seq[mini]!=""){seq[mini]=seq[mini]""sp; cnt[mini]+=20*50}; print $2"\tpseudochr"mini"\t"cnt[mini]+1"\t"cnt[mini]+$1 > "pseudochr.txt"; seq[mini]=seq[mini]""$NF; cnt[mini]+=$1} END{for(i=1;i<=n;i++){print ">pseudochr"i; print seq[i]}}' > pseudochr.fa
DO_EXONERATE fastareformat pseudochr.fa > pseudochr.re.fa
cat pseudochr.txt |awk '{print $2"\t"$3-1"\t"$4"\t"$1"\t0\t+"}' > pseudochr.bed

set +o pipefail
(for i in $r1; do cat $i; done; for i in $r1gz; do DO_SELDLA zcat $i; done)|awk 'FILENAME==ARGV[1]{n+=$2} FILENAME==ARGV[2]{if(FNR%4==1){s1=$0}else if(FNR%4==2){cnt+=length($0)-16; if(cnt>n*50){exit}; s2=substr($0,17)}else if(FNR%4==3){s3=$0}else{print s1; print s2; print s3; print substr($0,17)}}' "$ref".fai /dev/stdin > temp100xtrim_1.fastq
(for i in $r2; do cat $i; done; for i in $r2gz; do DO_SELDLA zcat $i; done)|head -n `cat temp100xtrim_1.fastq|wc -l` > temp100xtrim_2.fastq
set -o pipefail

DO_SAMTOOLS samtools faidx pseudochr.re.fa
DO_BWA bwa index pseudochr.re.fa
DO_BWA bwa mem -t $N_CPU pseudochr.re.fa temp100xtrim_1.fastq temp100xtrim_2.fastq |DO_SAMTOOLS samtools sort -@ $N_CPU - > pseudochr.re.fa.100x.bam
DO_SAMTOOLS samtools index pseudochr.re.fa.100x.bam
DO_BCF bcftools mpileup -Ou --annotate AD,DP,INFO/AD -f pseudochr.re.fa pseudochr.re.fa.100x.bam | DO_BCF bcftools call -vm -f GQ -o pseudochr.re.fa.100x.bam.vcf


DO_SELDLA tar zvxf "$input_3"
name=`basename $(echo $r1 $r1gz|awk '{print $1}')|sed 's/[.]gz$//; s/_S._L..._R1_...[.]fastq$//'`
(echo '{"species_prefixes": [""],"primary_contigs": ['; awk '{ORS=""; if(NR!=1){print ","}; print "\""$1"\""}' pseudochr.re.fa.fai; echo '],"sex_chromosomes": {"_male": {"pseudochr1": 2},"_female": {"pseudochr1": 2}},"non_nuclear_contigs": ["chrM"]}' ) > pseudochr.re.fa.json
DO_SELDLA ./cellranger-dna-1.1.0/cellranger-dna mkref pseudochr.re.fa pseudochr.re.fa.json
DO_SELDLA ./cellranger-dna-1.1.0/cellranger-dna cnv --id=10x_output --reference=refdata-pseudochr.re --fastqs="$input_1" --sample="$name"
cat 10x_output/outs/per_cell_summary_metrics.csv |awk -F, '$16==-2{print $1}' > tags.removedup.txt

DO_VARTRIX vartrix_linux --bam 10x_output/outs/possorted_bam.bam --cell-barcodes tags.removedup.txt --fasta pseudochr.re.fa --vcf pseudochr.re.fa.100x.bam.vcf --mapq 5 --out-matrix pseudochr.re.fa.removedup.matrix --out-variants pseudochr.re.fa.removedup.variants --threads $N_CPU
DO_SELDLA awk 'NR<=3{print $0} NR>3{if(old!=$1){if(mut1>=0.2*mut2 && mut2>=0.2*mut1 && mut3<=0.2*mut1 && mut3<=0.2*mut2 && mut1+mut2>=10){PROCINFO["sorted_in"]="@ind_num_asc"; for(i in data){print data[i]}}; old=$1; mut1=0; mut2=0; mut3=0; delete data}; if($3==1){mut1++}else if($3==2){mut2++}else if($3==3){mut3++}; data[FNR]=$0} END{if(mut1>=0.2*mut2 && mut2>=0.2*mut1 && mut3<=0.2*mut1 && mut3<=0.2*mut2 && mut1+mut2>=10){PROCINFO["sorted_in"]="@ind_num_asc"; for(i in data){print data[i]}}}' pseudochr.re.fa.removedup.matrix > pseudochr.re.fa.removedup.matrix.clean
awk 'FILENAME==ARGV[1]{var[FNR]=$1; nvar++} FILENAME==ARGV[2]{id[FNR]=$1; nid++} FILENAME==ARGV[3] && FNR>3{ORS=""; if(FNR==4){print "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT"; for(i=1;i<=nid;i++){print "\t"id[i]}; m=nid+1}; if(old!=$1){for(i=m;i<=nid;i++){print "\t-1"}; split(var[$1],arr,"_"); chr=arr[1]; for(ai=2;ai<length(arr);ai++){chr=chr"_"arr[ai]}; pos=arr[length(arr)]; print "\n"chr"\t"pos"\t.\t.\t.\t.\t.\t.\tGT"; m=1; old=$1}; for(i=m;i<$2;i++){print "\t-1"}; if($3==1){print "\t0"}else if($3==2){print "\t2"}else if($3==3){print "\t1"}else{print "\t-1"}; m=$2+1} END{for(i=m;i<=nid;i++){print "\t-1"}; print "\n"}' pseudochr.re.fa.removedup.variants tags.removedup.txt pseudochr.re.fa.removedup.matrix.clean > pseudochr.re.fa.removedup.matrix.clean.txt
awk -F'\t' 'FILENAME==ARGV[1]{chr0[NR]=$1; chr1[NR]=$2; poss[NR]=$3; pose[NR]=$4; n=NR} FILENAME==ARGV[2]{if(FNR==1){print $0}else{for(i=1;i<=n;i++){m=i; if(chr1[i]==$1 && poss[i]<=$2 && pose[i]>=$2){f=1; break}}; if(f==1){$1=chr0[m]; $2=$2-poss[m]+1; OFS="\t"; print $0; f=0}}}' pseudochr.txt pseudochr.re.fa.removedup.matrix.clean.txt > pseudochr.re.fa.removedup.matrix.clean.txt.vcf
awk -F'\t' 'NR==1{OFS="\t"; $9=$9"\tdummy"; print $0} NR>1{$9=$9"\t1"; print $0}' pseudochr.re.fa.removedup.matrix.clean.txt.vcf > pseudochr.re.fa.removedup.matrix.clean.txt_clean.txt
head -n 1 pseudochr.re.fa.removedup.matrix.clean.txt_clean.txt|cut -f 10- > pseudochr.re.fa.removedup.matrix.clean.txt.vcf2.family


post_processing

#<option detail>
#<opt_b>
SELDLA ver2.0.7
      --DP=VALUE             DP_threshold [1]
      --GQ=VALUE             GQ_threshold [0]
  -p, --hqsnp=VALUE          high quality SNP rate [0.3]
  -b, --bal=VALUE            0 / 1 balance [0.1]
      --NonZeroSampleRate=VALUE
                             exclude ambiquous SNP (0-1) [0.3]
      --NonZeroPhaseRate=VALUE
                             exclude ambiquous Phase (0-1) [0.3]
      --ldnum=VALUE          the minimum number of same LD [1]
  -s, --exmatch=VALUE        extension match rate [0.7]
  -v, --spmatch=VALUE        split match rate [0.7]
  -l, --clmatch=VALUE        cluster match rate [0.8]
      --cs=VALUE             cluster size [2]
      --nl=VALUE             near SNP match rate [0.9]
  -r=VALUE                   the region to merge near SNP (bp) [10000]
  -o, --output=VALUE         output prefix [seldla]
      --vcf=VALUE            input VCF file <required>
      --fasta=VALUE          input FASTA file <required>
      --family=VALUE         input family file <required>
      --noNewVcf             no converted vcf output with new position
      --precleaned=VALUE     pre-calculated cleaned vcf file (if this option is
                               used, input vcf is not used.)
      --mode=VALUE           analysis mode (crossbreed, haploid, duploid) [
                               crossbreed]
      --MaxLdClusterOnly     use max size LD cluster only
      --RateOfNotNASNP=VALUE threshold of the ratio that is not NA with each
                               other when comparing SNP at the clustering step [
                               0.2]
      --RateOfNotNALD=VALUE  threshold of the ratio that is not NA with each
                               other when comparing LD at the clustering step [
                               0.4]
  -h, --help                 show help.

for RAD-seq:    --GQ=20 -r 100 --DP=5 --cs=3 --mode=duploid
for crossbreed: --GQ=0 -r 10000 --DP=1 --cs=2 --mode=crossbreed
#</opt_b>
#</option detail>

