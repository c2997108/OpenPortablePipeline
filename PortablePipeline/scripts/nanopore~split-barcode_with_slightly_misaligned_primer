#!/bin/bash

explanation='
This will separate the sequencing data by barcode from PCR products amplified using primers with unique barcodes. If a primer set with slightly shifted positions is included, please use this pipeline. However, note that this pipeline may result in higher noise levels.
'
inputdef='
input_1:directory:FASTQ:*.fastq,*.fq,*.fastq.gz,*.fq.gz
input_2::primer sequences (FASTA):*.fasta,*.fa,*.fna,*.txt
input_3::sample table (Sample name[tab]Forward read name[tab]Reverse read name[tab]Minimum amplicon length[tab]Maximum amplicon length):*.txt
input_4:option:sequencing_summary_XXX.txt:sequencing_summary*.txt
'
optiondef='
opt_c:cpu threads:16
opt_m:memory limit (GB):32
opt_p:Solve condensed bases in primers (y|n):y
opt_f:Adapter alignment length percentage threshold of a whole read:0.7
opt_i:Identity threshold of a whole read (%):80
opt_b:Barcode filtering (Barcode length must be at least 4 bp) (y|n):y
opt_a:Adapter alignment length percentage threshold of a barcode:0.9
opt_j:Identity threshold of a barcode (%):90
'
runcmd="$0 -c #opt_c# -m #opt_m# -p #opt_p# -f #opt_f# -i #opt_i# -b #opt_b# -a #opt_a# -j #opt_j# -s #input_4# #input_1# #input_2# #input_3#"

export IM_BLAST="c2997108/centos7:2-blast-taxid-2-KronaTools-2.7-mitofish2"
export IM_SAMTOOLS="quay.io/biocontainers/samtools:1.9--h10a08f8_12"
export IM_SEQKIT="quay.io/biocontainers/seqkit:0.12.1--0"
export IM_R="c2997108/ubuntu20:R-2_gplots_ggExtra"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail

input_4="${opt_s:-}"

primers="$input_2"
list="$input_3"

cat "$primers" | sed 's/\t/ /g; s/\r//g'| DO_SEQKIT seqkit fx2tab |awk -F'\t' '{split($1,arr," "); a=toupper($2); gsub(/[^ACGTBVDHKMRYSWN]/,"",a); print ">"arr[1]"\n"a}' > primer-clean.fa
primers=primer-clean.fa

cat "$list" | sed 's/\t\+/\t/g' | awk -F'\t' '$1!=""&&$2!=""&&$3!=""&&$4!=""&&$5!=""&&$5>$4{print $0}' > samplelist-clean.txt
list=samplelist-clean.txt

#プライマーの縮重塩基を解消
if [ "$opt_p" = "y" ]; then
DO_SEQKIT seqkit fx2tab "$primers"|(awk -F'\t' '
BEGIN{
D["R"][1]="A"; D["R"][2]="G";
D["M"][1]="A"; D["M"][2]="C";
D["W"][1]="A"; D["W"][2]="T";
D["S"][1]="C"; D["S"][2]="G";
D["Y"][1]="C"; D["Y"][2]="T";
D["K"][1]="G"; D["K"][2]="T";
D["H"][1]="A"; D["H"][2]="T"; D["H"][3]="C";
D["B"][1]="G"; D["B"][2]="T"; D["B"][3]="C";
D["D"][1]="G"; D["D"][2]="A"; D["D"][3]="T";
D["V"][1]="A"; D["V"][2]="C"; D["V"][3]="G";
D["N"][1]="A"; D["N"][2]="C"; D["N"][3]="G"; D["N"][4]="T"
}
{str=toupper($(NF-1)); a[1]="";
 for(n=1;n<=length(str);n++){
  k=0;
  tempchar=substr(str,n,1);
  for(i in a){
   if(length(D[tempchar])==0){
    k++; b[k]=a[i]tempchar
   }else{
    for(j in D[tempchar]){k++; b[k]=a[i]D[tempchar][j]}
   }
  };
  for(i=1;i<=k;i++){a[i]=b[i]}
 };
 for(i=1;i<=k;i++){print ">"$1"#_#"i; print a[i]}
 delete a
}
') > "$primers".solved.fa
else
 cp "$primers" "$primers".solved.fa
fi

DO_BLAST makeblastdb -in "$primers".solved.fa -dbtype nucl
DO_SAMTOOLS samtools faidx "$primers"

DO_BLAST seqkit fx2tab "$primers"|awk -F'\t' '
 function rev(x,  i, str){for(i=length(x);i>0;i--){str=str""substr(x,i,1)}; return str}
 function comp(x){if(x=="A"){return "T"}else if(x=="C"){return "G"}else if(x=="G"){return "C"}else if(x=="T"){return "A"}
  else if(x=="B"){return "V"}else if(x=="V"){return "B"}else if(x=="D"){return "H"}else if(x=="H"){return "D"}
  else if(x=="K"){return "M"}else if(x=="M"){return "K"}else if(x=="R"){return "Y"}else if(x=="Y"){return "R"}
  else if(x=="S"){return "W"}else if(x=="W"){return "S"}
  else{return "N"}
 }
 function revcomp(x,  i, str, revx){revx=rev(x); for(i=1;i<=length(revx);i++){str=str""comp(substr(revx,i,1))}; return str}

 {key=substr($2,1,8); cnt[key]++; f[key][cnt[key]][1]=$1; f[key][cnt[key]][2]=$2}
 END{
  #プライマーの5側8bpを検索し同一の配列をグループにする
  for(key in f){
   commonseq=f[key][1][2];
   for(i in f[key]){seq=f[key][i][2]; tempseq="";
    for(j=1;j<=length(seq)&&j<=length(commonseq);j++){
     if(substr(commonseq,j,1)==substr(seq,j,1)){tempseq=tempseq""substr(seq,j,1)}
     else{break}
    }
    commonseq=tempseq
   }
   #print key"\t"commonseq
   disflag=0
   for(i in f[key]){
    f2[key][i][2]=revcomp(substr(f[key][i][2],length(commonseq)+1))
    if(length(f2[key][i][2])<8){
     disflag = 1
    }
   }
   #8bpよりも残った配列が短いならば元の配列のままにしておく
   if(disflag==1){
    for(i in f[key]){
     f2[key][i][2]=revcomp(f[key][i][2])
    }
   }
  }
  for(key in f){
   for(i in f[key]){
    key2=substr(f2[key][i][2],1,8); cnt2[key2]++; r[key2][cnt2[key2]][1]=f[key][i][1]; r[key2][cnt2[key2]][2]=f2[key][i][2]
   }
  }
  #プライマーの3側8bpを検索し同一の配列をグループにする
  for(key in r){
   commonseq=r[key][1][2];
   for(i in r[key]){seq=r[key][i][2]; tempseq="";
    for(j=1;j<=length(seq)&&j<=length(commonseq);j++){
     if(substr(commonseq,j,1)==substr(seq,j,1)){tempseq=tempseq""substr(seq,j,1)}
     else{break}
    }
    commonseq=tempseq
   }
   #print key"\t"commonseq
   disflag=0
   for(i in r[key]){
    r2[key][i][2]=revcomp(substr(r[key][i][2],length(commonseq)+1))
    if(length(r2[key][i][2])<8){
     disflag = 1
    }
   }
   if(disflag==1){
    for(i in r[key]){
     r2[key][i][2]=revcomp(r[key][i][2])
    }
   }
  }
  for(key in r){
   for(i in r[key]){
    print ">"r[key][i][1]"\n"r2[key][i][2]
   }
  }
 }' > primer-tags.fa

if [ "$opt_b" = "y" ];then
 DO_BLAST makeblastdb -in primer-tags.fa -dbtype nucl || opt_b=n #もしmakeblastdbに失敗するならフィルターはしない（けど失敗することはまずないかも）
fi


cat << 'EOF' > run-blast.sh
#!/bin/bash

i="$1" #xxx.fastq.gz
primers="$2" #primers.fa
list="$3" #sample.txt
opt_f="$4" #0.7
opt_i="$5" #90
opt_b="$6" #y
opt_a="$7" #0.9
opt_j="$8" #90

set -eux
set -o pipefail

seqkit fq2fa "$i" > "$i".fasta
blastn -db "$primers".solved.fa -query "$i".fasta -num_threads 1 -word_size 4 -outfmt 6 -max_target_seqs 10000 | sed 's/#_#[0-9]\+//' > "$i".fasta.blastn
#縮重塩基表示を解消していた場合の番号を消している

#元々1リード中に複数ヒットしていることを前提にしていたようだけど、複数ヒットをスコア順に処理できていなかったので最もスコアの合計の高いものだけを抽出するように変更
cat "$i".fasta.blastn|awk -F'\t' -v thr=$opt_f -v identity=$opt_i '
 FILENAME==ARGV[1]{len[$1]=$2}
 FILENAME==ARGV[2]{if($4>=len[$2]*thr&&$3>=identity){print $0}}
' "$primers".fai /dev/stdin | awk -F'\t' '
 function detectPrimer(){
   for(i=1;i<=nf;i++){
    for(j=1;j<=nr;j++){
     if(namef[i] in pair && namer[j] in pair[namef[i]]){
      #pair[namef[i]][namer[j]]はサンプル名
      #そのリードのペアがありうる組み合わせなら
      if(orientf[i]==1 && orientr[j]==-1){
       #順向きのペア
       len_frag = rendr[j] - rstartf[i] + 1
       #リード長が指定範囲内かどうか
       if(len_frag >= minlen[pair[namef[i]][namer[j]]] && len_frag <= maxlen[pair[namef[i]][namer[j]]]){
        #縮重塩基で同じ名前のプライマーが何度も同一スコアでヒットするのでその対策。同じ名前のプライマーペアなら最初の一つを採用
        if(namef[i]!=maxfname && namer[j]!=maxrname){
         nsum[scoref[i]+scorer[j]]++
         if(scoref[i]+scorer[j]>maxscore){
          maxscore=scoref[i]+scorer[j]
          maxfname=namef[i]
          maxrname=namer[j]
          data=pair[namef[i]][namer[j]]"\t"old"\t"namef[i]"\t"namer[j]"\t"rendf[i]+1"\t"rstartr[j]-1"\t1\t"scoref[i]+scorer[j]"\t"rstartf[i]"\t"rendf[i]"\t"rstartr[j]"\t"rendr[j]
         }
        }
       }
      }else if(orientf[i]==-1 && orientr[j]==1){
       #逆向きのペア
       len_frag = rendf[i] - rstartr[j] + 1
       if(len_frag >= minlen[pair[namef[i]][namer[j]]] && len_frag <= maxlen[pair[namef[i]][namer[j]]]){
        if(namef[i]!=maxfname && namer[j]!=maxrname){
         nsum[scoref[i]+scorer[j]]++
         if(scoref[i]+scorer[j]>maxscore){
          maxscore=scoref[i]+scorer[j]
          maxfname=namef[i]
          maxrname=namer[j]
          data=pair[namef[i]][namer[j]]"\t"old"\t"namef[i]"\t"namer[j]"\t"rendr[j]+1"\t"rstartf[i]-1"\t-1\t"scoref[i]+scorer[j]"\t"rstartf[i]"\t"rendf[i]"\t"rstartr[j]"\t"rendr[j]
         }
        }
       }
      }
     }
    }
   }
   #maxscoreが一つだけの場合のみ出力
   if(maxscore>0 && nsum[maxscore]==1){
    print data
   }
   delete namef
   delete namer
   nf=0
   nr=0
   n=0
   maxscore=0
   maxfname=""
   maxrname=""
   delete nsum
 }
 FILENAME==ARGV[1]{f[$2]=1; r[$3]=1; minlen[$1]=$4; maxlen[$1]=$5; pair[$2][$3]=$1}
 FILENAME==ARGV[2]{
  if($1!=old){
   detectPrimer()
   old=$1
  }
  if($2 in f){nf++; namef[nf]=$2; scoref[nf]=$12; rstartf[nf]=$7; rendf[nf]=$8; if($9<$10){orientf[nf]=1}else{orientf[nf]=-1}}
  else if($2 in r){nr++; namer[nr]=$2; scorer[nr]=$12; rstartr[nr]=$7; rendr[nr]=$8; if($9<$10){orientr[nr]=1}else{orientr[nr]=-1}}
 }
 END{
  #最後に同じ処理
  detectPrimer()
 }
' "$list" /dev/stdin > "$i".fasta.blastn.tag_position.txt

if [ "$opt_b" = "y" ];then
 blastn -db primer-tags.fa -query "$i".fasta -num_threads 1 -word_size 4 -outfmt 6 > "$i".fasta.tagblastn

 awk -F'\t' -v align=$opt_a -v ident=$opt_j '
  FILENAME==ARGV[1]{len[$1]=length($2)}
  FILENAME==ARGV[2]{data[$2]=$0; readf[$2]=$3; readr[$2]=$4; readori[$2]=$7; readfstart[$2]=$9; readfend[$2]=$10; readrstart[$2]=$11; readrend[$2]=$12}
  FILENAME==ARGV[3]&&$3>=ident{
   ori=1; if($9>$10){ori=-1};
   if($1 in readf && readf[$1] == $2 && $4 >= len[$2]*align && readori[$1] == ori && $7>=readfstart[$1] && $8<=readfend[$1]){dataf[$1]=data[$1]}
   else if($1 in readr && readr[$1] == $2 && $4 >= len[$2]*align && readori[$1] == ori * -1 && $7>=readrstart[$1] && $8<=readrend[$1]){datar[$1]=data[$1]}
  }
  END{for(i in dataf){if(i in datar){print dataf[i]}}}
 ' <(seqkit fx2tab primer-tags.fa) "$i".fasta.blastn.tag_position.txt <(cat "$i".fasta.tagblastn) > "$i".fasta.blastn.tag_position_filtered.txt
else
 cp -p "$i".fasta.blastn.tag_position.txt "$i".fasta.blastn.tag_position_filtered.txt
fi

EOF

(for i in `find $input_1/|egrep "[.]f(ast|)q(|[.]gz)$"||true`; do
 echo $ENV_BLAST "bash run-blast.sh $i $primers $list $opt_f $opt_i $opt_b $opt_a $opt_j"
done) |DOPARALLELONE

WAITPARALLEL


#サンプルごとに分割したFASTQファイル出力
(for i in `find $input_1/|egrep "[.]f(ast|)q$"||true`; do
 cat $i
done
for i in `find $input_1/|egrep "[.]f(ast|)q[.]gz$"||true`; do
 zcat $i
done)|awk -F'\t' '
 function rev(x,  i, str){for(i=length(x);i>0;i--){str=str""substr(x,i,1)}; return str}
 function comp(x){if(x=="A"){return "T"}else if(x=="C"){return "G"}else if(x=="G"){return "C"}else if(x=="T"){return "A"}
  else if(x=="B"){return "V"}else if(x=="V"){return "B"}else if(x=="D"){return "H"}else if(x=="H"){return "D"}
  else if(x=="K"){return "M"}else if(x=="M"){return "K"}else if(x=="R"){return "Y"}else if(x=="Y"){return "R"}
  else if(x=="S"){return "W"}else if(x=="W"){return "S"}
  else{return "N"}
 }
 function revcomp(x,  i, str, revx){revx=rev(x); for(i=1;i<=length(revx);i++){str=str""comp(substr(revx,i,1))}; return str}
 FILENAME==ARGV[1]{name[$2]=$1; s[$2]=$5; e[$2]=$6; strand[$2]=$7; info[$2]=$5":"$6":"$7":"$3":"$4}
 FILENAME==ARGV[2]{
  n++;
  if(FNR%4==1){split($1,arr," "); id=substr(arr[1],2)};
  if(name[id]!=""){
   n2++;
   if(FNR%4==1){
    n3[name[id]]++;
    print "@"id":"info[id] > name[id]".fq"
   }else if(FNR%4==2){
    if(strand[id]==1){print substr($0,s[id],e[id]-s[id]+1) > name[id]".fq"}
    else{print revcomp(substr($0,s[id],e[id]-s[id]+1)) > name[id]".fq"}
   }else if(FNR%4==0){
    if(strand[id]==1){print substr($0,s[id],e[id]-s[id]+1) > name[id]".fq"}
    else{print rev(substr($0,s[id],e[id]-s[id]+1)) > name[id]".fq"}
   }else{print "+" > name[id]".fq"}
  }
 }
 END{
  print "Total: "n/4" reads"
  print " Demultiplexed: "n2/4" reads"
  for(i in n3){
   print "  "i": "n3[i]" reads"
  }
 }
' <(cat "$input_1"/*.tag_position_filtered.txt) /dev/stdin


#統計情報があればグラフ作成
if [ "$input_4" != "" ];then
 for i in *.fq; do
  DO_SEQKIT seqkit fx2tab "$i"|awk -F'\t' '{split($1,arr,":"); print arr[1]"\t"length($2)}'|
   awk -F'\t' '
    BEGIN{print "read_id\tlength\tmean_qscore"}
    FILENAME==ARGV[1]{a[$1]=$2}
    FILENAME==ARGV[2]&&FNR==1{for(i=1;i<=NF;i++){if($i=="mean_qscore_template"){qs=i}else if($i=="read_id"){id=i}}}
    FILENAME==ARGV[2]&&$id in a{print $id"\t"a[$id]"\t"$qs}
   ' /dev/stdin "$input_4" > "$i".stats
  echo 'library(ggExtra)
library(hexbin)
library(ggplot2)
library(Cairo)
a=read.table("'"$i".stats'", sep="\t", header = T)
CairoPNG("'"$i"'.png",width=1500,height = 1500)
g=ggplot(a, aes(x = length, y = mean_qscore))+stat_binhex(bins=300)+scale_x_log10()+scale_fill_gradient(trans = "log")+geom_point(shape=19 ,alpha = 0,size=0.1)+theme(legend.position = "left")
ggMarginal(g, type = "density", margins = "both", size = 4)
dev.off()' > $i.R
  echo "$ENV_R Rscript $i.R"
 done | DOPARALLELONE
 WAITPARALLEL
fi

post_processing
#<option detail>
#<opt_f>
#</opt_f>
#</option detail>

