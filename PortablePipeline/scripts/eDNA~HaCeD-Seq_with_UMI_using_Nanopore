#!/bin/bash

explanation='
Pipeline to analyze Nanopore sequenced data with UMI for HaCeD-Seq.
Adapter and primer sequences must be specified as 5’->3’ orientation as follows.
Forward_adapter (Foward_UMI) Foward_primer (D-loop) Reverse_primer (Reverse_UMI) Reverse_primer
5’---------->3’              5’-------->3’          3’<---------5’               3’<---------5’
'
inputdef='
input_1:directory:Nanopore FASTQ(.gz) files:*.fastq,*.fq,*.fastq.gz,*.fq.gz
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):64
opt_f:Sequence of foward primer:ARAGCRYCGGTCTTGTAA
opt_r:Sequence of reverse primer:CGGAKACTTGCATGTRTAA
opt_g:Sequence of forward adapter:TACACGACGCTCTTCCGATCTGTC
opt_s:Sequence of reverse adapter:AGACGTGTGCTCTTCCGATCTCAG
opt_e:Length of foward UMI:13
opt_q:Length of reverse UMI:13
opt_a:Minimum length of D-loop:600
opt_b:Maximum length of D-loop:1600
opt_d:Minimum UMI count:5
'
runcmd="$0 -c #opt_c# -m #opt_m# -f #opt_f# -r #opt_r# -g #opt_g# -s #opt_s# -e #opt_e# -q #opt_q# #input_1#"

export IM_SELDLA="c2997108/seldla:2.1.2_2"
export IM_BASE="c2997108/seldla:2.1.2_2"
export IM_SEQKIT="c2997108/centos7:2-blast-taxid-2-KronaTools-2.7-mitofish2"
export IM_BLAST="c2997108/centos7:2-blast-taxid-2-KronaTools-2.7-mitofish2"
export IM_SAMTOOLS="biocontainers/samtools:v1.7.0_cv4"
export IM_MEDAKA="c2997108/medaka:1.4.3_2"
export IM_MUSCLE="quay.io/biocontainers/muscle:3.8.1551--h7d875b9_6"
export IM_CONS="quay.io/biocontainers/emboss:6.6.0--h8719169_4"
export IM_MERGE="c2997108/centos7:3-java"
export IM_MITOFISH="c2997108/centos7:2-blast-taxid-2-KronaTools-2.7-mitofish2"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail

r="`find $input_1/ |egrep '[.]f(ast|)q$' || echo ''`"
rgz="`find $input_1/ |egrep '[.]f(ast|)q[.]gz$' || echo ''`"

if [ "$r$rgz" = "" ]; then echo "Place fastq(.gz) files in input folder"; post_processing; fi

echo "$opt_f"|(DO_BASE awk -v name="primer_f" '
BEGIN{
D["R"][1]="A"; D["R"][2]="G"; 
D["M"][1]="A"; D["M"][2]="C"; 
D["W"][1]="A"; D["W"][2]="T"; 
D["S"][1]="C"; D["S"][2]="G"; 
D["Y"][1]="C"; D["Y"][2]="T"; 
D["K"][1]="G"; D["K"][2]="T"; 
D["H"][1]="A"; D["H"][2]="T"; D["H"][3]="C"; 
D["B"][1]="G"; D["B"][2]="T"; D["B"][3]="C"; 
D["D"][1]="G"; D["D"][2]="A"; D["D"][3]="T"; 
D["V"][1]="A"; D["V"][2]="C"; D["V"][3]="G"; 
D["N"][1]="A"; D["N"][2]="C"; D["N"][3]="G"; D["N"][4]="T"
}
{str=toupper($0); a[1]="";
 for(n=1;n<=length(str);n++){
  k=0;
  tempchar=substr(str,n,1);
  for(i in a){
   if(length(D[tempchar])==0){
    k++; b[k]=a[i]tempchar
   }else{
    for(j in D[tempchar]){k++; b[k]=a[i]D[tempchar][j]}
   }
  };
  for(i=1;i<=k;i++){a[i]=b[i]}
 }; for(i=1;i<=k;i++){print ">"name"-"i; print a[i]}
}
') > primer_f

echo "$opt_r"|(DO_BASE awk -v name="primer_r" '
BEGIN{
D["R"][1]="A"; D["R"][2]="G"; 
D["M"][1]="A"; D["M"][2]="C"; 
D["W"][1]="A"; D["W"][2]="T"; 
D["S"][1]="C"; D["S"][2]="G"; 
D["Y"][1]="C"; D["Y"][2]="T"; 
D["K"][1]="G"; D["K"][2]="T"; 
D["H"][1]="A"; D["H"][2]="T"; D["H"][3]="C"; 
D["B"][1]="G"; D["B"][2]="T"; D["B"][3]="C"; 
D["D"][1]="G"; D["D"][2]="A"; D["D"][3]="T"; 
D["V"][1]="A"; D["V"][2]="C"; D["V"][3]="G"; 
D["N"][1]="A"; D["N"][2]="C"; D["N"][3]="G"; D["N"][4]="T"
}
{str=toupper($0); a[1]="";
 for(n=1;n<=length(str);n++){
  k=0;
  tempchar=substr(str,n,1);
  for(i in a){
   if(length(D[tempchar])==0){
    k++; b[k]=a[i]tempchar
   }else{
    for(j in D[tempchar]){k++; b[k]=a[i]D[tempchar][j]}
   }
  };
  for(i=1;i<=k;i++){a[i]=b[i]}
 }; for(i=1;i<=k;i++){print ">"name"-"i; print a[i]}
}
') > primer_r

echo "$opt_g"|(DO_BASE awk -v name="adapter_f" '
BEGIN{
D["R"][1]="A"; D["R"][2]="G"; 
D["M"][1]="A"; D["M"][2]="C"; 
D["W"][1]="A"; D["W"][2]="T"; 
D["S"][1]="C"; D["S"][2]="G"; 
D["Y"][1]="C"; D["Y"][2]="T"; 
D["K"][1]="G"; D["K"][2]="T"; 
D["H"][1]="A"; D["H"][2]="T"; D["H"][3]="C"; 
D["B"][1]="G"; D["B"][2]="T"; D["B"][3]="C"; 
D["D"][1]="G"; D["D"][2]="A"; D["D"][3]="T"; 
D["V"][1]="A"; D["V"][2]="C"; D["V"][3]="G"; 
D["N"][1]="A"; D["N"][2]="C"; D["N"][3]="G"; D["N"][4]="T"
}
{str=toupper($0); a[1]="";
 for(n=1;n<=length(str);n++){
  k=0;
  tempchar=substr(str,n,1);
  for(i in a){
   if(length(D[tempchar])==0){
    k++; b[k]=a[i]tempchar
   }else{
    for(j in D[tempchar]){k++; b[k]=a[i]D[tempchar][j]}
   }
  };
  for(i=1;i<=k;i++){a[i]=b[i]}
 }; for(i=1;i<=k;i++){print ">"name"-"i; print a[i]}
}
') > adapter_f

echo "$opt_s"|(DO_BASE awk -v name="adapter_r" '
BEGIN{
D["R"][1]="A"; D["R"][2]="G"; 
D["M"][1]="A"; D["M"][2]="C"; 
D["W"][1]="A"; D["W"][2]="T"; 
D["S"][1]="C"; D["S"][2]="G"; 
D["Y"][1]="C"; D["Y"][2]="T"; 
D["K"][1]="G"; D["K"][2]="T"; 
D["H"][1]="A"; D["H"][2]="T"; D["H"][3]="C"; 
D["B"][1]="G"; D["B"][2]="T"; D["B"][3]="C"; 
D["D"][1]="G"; D["D"][2]="A"; D["D"][3]="T"; 
D["V"][1]="A"; D["V"][2]="C"; D["V"][3]="G"; 
D["N"][1]="A"; D["N"][2]="C"; D["N"][3]="G"; D["N"][4]="T"
}
{str=toupper($0); a[1]="";
 for(n=1;n<=length(str);n++){
  k=0;
  tempchar=substr(str,n,1);
  for(i in a){
   if(length(D[tempchar])==0){
    k++; b[k]=a[i]tempchar
   }else{
    for(j in D[tempchar]){k++; b[k]=a[i]D[tempchar][j]}
   }
  };
  for(i=1;i<=k;i++){a[i]=b[i]}
 }; for(i=1;i<=k;i++){print ">"name"-"i; print a[i]}
}
') > adapter_r
cat primer_f primer_r adapter_f adapter_r > primers.fa
DO_BLAST makeblastdb -in primers.fa -dbtype nucl
DO_SAMTOOLS samtools faidx primers.fa

mkdir -p umi-find

cat << 'EOF' > run-umifind.sh
#!/bin/bash
set -eux
set -o pipefail

i="$1"
opt_a="$2"
opt_b="$3"
opt_e="$4"
opt_q="$5"

seqkit fq2fa "$i" > umi-find/"`basename $i`".fasta
blastn -db primers.fa -query umi-find/"`basename $i`".fasta -num_threads 1 -word_size 4 -outfmt 6 > umi-find/"`basename $i`".fasta.blastn
cat umi-find/"`basename $i`".fasta.blastn|awk -F'\t' -v p=0.9 'FILENAME==ARGV[1]{len[$1]=$2} FILENAME==ARGV[2]{if($4>=len[$2]*p){print $0"\t"len[$2]}}' primers.fa.fai /dev/stdin|awk '{OFS="\t"; gsub(/-.*/,"",$2); print $0}'|awk -v min="$opt_a" -v max="$opt_b" -v lenumif="$opt_e" -v lenumir="$opt_q" -v p=0.9 -v nmax=4 '{if($1!=old){if(flag["adapter_f"]==1 && flag["adapter_r"]==1 && flag["primer_f"]==1 && flag["primer_r"]==1){PROCINFO["sorted_in"]="@val_num_desc"; flagprint=0; nf1=0; nf2=0; nr1=0; nr2=0; for(f1 in data["primer_f"]){nf1++; if(nf1>nmax){break}; split(f1,af1,"\t"); for(f2 in data["adapter_f"]){nf2++; if(nf2>nmax){break}; split(f2,af2,"\t"); for(r1 in data["primer_r"]){nr1++; if(nr1>nmax){break}; split(r1,ar1,"\t"); for(r2 in data["adapter_r"]){nr2++; if(nr2>nmax){break}; split(r2,ar2,"\t"); if(af1[9]<af1[10] && ar1[9]>ar1[10]){if(ar1[8]-af1[7]>=min && ar1[8]-af1[7]<=max && af1[7]-af2[8]-1>=lenumif*p && af1[7]-af2[8]-1<=lenumif*(1+(1-p)) && ar2[7]-ar1[8]-1>=lenumir*p && ar2[7]-ar1[8]-1<=lenumir*(1+(1-p))){if(flagprint==0){print af1[1]"\t+\t"af2[8]+1"\t"af1[7]-1"\t"ar1[8]+1"\t"ar2[7]-1"\t"af1[8]+1"\t"ar1[7]-1; flagprint=1}}}else if(af1[9]>af1[10] && ar1[9]<ar1[10]){if(af1[8]-ar1[7]>=min && af1[8]-ar1[7]<=max && af2[7]-af1[8]-1>=lenumif*p && af2[7]-af1[8]-1<=lenumif*(1+(1-p)) && ar1[7]-ar2[8]-1>=lenumir*p && ar1[7]-ar2[8]-1<=lenumir*(1+(1-p))){if(flagprint==0){print af1[1]"\t-\t"af1[8]+1"\t"af2[7]-1"\t"ar2[8]+1"\t"ar1[7]-1"\t"ar1[8]+1"\t"af1[7]-1; flagprint=1}} }}}}}}; delete flag; delete data}; flag[$2]=1; data[$2][$0]=$12; old=$1}' > umi-find/"`basename $i`".fasta.blastn.tsv
seqkit fx2tab umi-find/"`basename $i`".fasta|awk '
 function rev(x,  i, str){for(i=length(x);i>0;i--){str=str""substr(x,i,1)}; return str}
 function comp(x){if(x=="A"){return "T"}else if(x=="C"){return "G"}else if(x=="G"){return "C"}else if(x=="T"){return "A"}
  else if(x=="B"){return "V"}else if(x=="V"){return "B"}else if(x=="D"){return "H"}else if(x=="H"){return "D"}
  else if(x=="K"){return "M"}else if(x=="M"){return "K"}else if(x=="R"){return "Y"}else if(x=="Y"){return "R"}
  else if(x=="S"){return "W"}else if(x=="W"){return "S"}else{return "N"}}
 function revcomp(x,  i, str, revx){revx=rev(x); for(i=1;i<=length(revx);i++){str=str""comp(substr(revx,i,1))}; return str}
 FILENAME==ARGV[1]{seq[$1]=$NF} FILENAME==ARGV[2]{if($2=="+"){print "+:"$1"\t"substr(seq[$1],$3,$4-$3+1)"-"substr(seq[$1],$5,$6-$5+1)"\t"substr(seq[$1],$7,$8-$7+1)}else{print "-:"$1"\t"revcomp(substr(seq[$1],$3,$4-$3+1))"-"revcomp(substr(seq[$1],$5,$6-$5+1))"\t"revcomp(substr(seq[$1],$7,$8-$7+1))}}' /dev/stdin umi-find/"`basename $i`".fasta.blastn.tsv > umi-find/"`basename $i`".fasta.blastn.tsv2

EOF

(for i in $r; do
 echo $ENV_SEQKIT bash run-umifind.sh "$i" "$opt_a" "$opt_b" "$opt_e" "$opt_q"
done
for i in $rgz; do
 echo $ENV_SEQKIT bash run-umifind.sh "$i" "$opt_a" "$opt_b" "$opt_e" "$opt_q"
done) | DOPARALLELONE

WAITPARALLEL

cat umi-find/*.fasta.blastn.tsv2 > all.fasta.blastn.tsv2
sort -k2,2 -t$'\t' all.fasta.blastn.tsv2 > all.fasta.blastn.tsv2.sort

mkdir -p umi-all
cat all.fasta.blastn.tsv2 |(DO_BASE awk -v opt_d="$opt_d" '{cnt[$2]++} END{PROCINFO["sorted_in"]="@val_num_desc"; for(i in cnt){print i"\t"cnt[i]}}'|awk 'FILENAME==ARGV[1] && $2>=opt_d{a[$1]=$2} FILENAME==ARGV[2]  && a[$2]>0{print ">"$1"\n"$3 > "umi-all/umi-"$2".fa"}' /dev/stdin all.fasta.blastn.tsv2.sort)
cd umi-all
wc -l umi-*-*.fa|awk '{print $2"\t"$1/2}' > count.umi
mkdir -p ../umi-correct
head -n-1 count.umi|sort -k 2,2nr -t$'\t' > temp.count.umi
for l in `seq 1 $(cat temp.count.umi|wc -l)`; do
 if [ `cat temp.count.umi|wc -l` = 0 ]; then break; fi
 q=`head -n 1 temp.count.umi|cut -f 1`
 cat $q > ../umi-correct/$q
 if [ `cat temp.count.umi|wc -l` = 1 ]; then break; fi
 head -n 1 temp.count.umi|awk '{split($1,arr,"[.]"); split(arr[1],arr2,"-"); print ">"$1" "$2; print arr2[2]}' > temp.for.q.fa
 head -n 1 temp.count.umi|awk '{split($1,arr,"[.]"); split(arr[1],arr2,"-"); print ">"$1" "$2; print arr2[3]}' > temp.rev.q.fa
 tail -n+2 temp.count.umi|awk '{split($1,arr,"[.]"); split(arr[1],arr2,"-"); print ">"$1" "$2; print arr2[2]}' > temp.for.db.fa
 tail -n+2 temp.count.umi|awk '{split($1,arr,"[.]"); split(arr[1],arr2,"-"); print ">"$1" "$2; print arr2[3]}' > temp.rev.db.fa
 DO_BLAST makeblastdb -in temp.for.db.fa -dbtype nucl
 DO_BLAST makeblastdb -in temp.rev.db.fa -dbtype nucl
 DO_BLAST blastn -db temp.for.db.fa -query temp.for.q.fa -word_size 4 -outfmt "6 qseqid sseqid qlen slen pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids stitle"|awk -F'\t' '($12-$11+1)-($7+$8)>$4*0.8' > temp.for.q.fa.blastn
 DO_BLAST blastn -db temp.rev.db.fa -query temp.rev.q.fa -word_size 4 -outfmt "6 qseqid sseqid qlen slen pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids stitle"|awk -F'\t' '($12-$11+1)-($7+$8)>$4*0.8' > temp.rev.q.fa.blastn
 awk 'FILENAME==ARGV[1]{a[$2]=1; t[$2]++} FILENAME==ARGV[2]{b[$2]=1; t[$2]++; q=$1} END{for(i in t){if(t[i]==2){print i"\tmerge\t"q}else{print i"\tdel\t"q}}}' temp.for.q.fa.blastn temp.rev.q.fa.blastn > temp.count.umi.temp
 cat temp.count.umi.temp >> ../umi-correct/merge.txt
 for i in `cat temp.count.umi.temp|awk '$2=="merge"'|cut -f 1`; do cat $i >> ../umi-correct/$q; done
 awk -F'\t' 'FILENAME==ARGV[1]{a[$1]=1} FILENAME==ARGV[2] && FNR>1 && a[$1]!=1{print $0}' temp.count.umi.temp temp.count.umi |sort -k2,2nr -t$'\t' > temp.count.umi2
 cp temp.count.umi2 temp.count.umi
done

cd ../umi-correct
for i in umi-*.fa; do echo "head -n 200 $i > $i.100; $ENV_MUSCLE muscle -in $i.100 -out $i.100.muscle; rm $i.100; $ENV_CONS cons -sequence $i.100.muscle -outseq $i.100.muscle.fasta"; done|DOPARALLELONE

WAITPARALLEL

cat << 'EOF' > run-medaka.sh
i=$1 #umi-CTACAGTAGTATG-AAGGCAATCATC.fa

sed 's/n//g' $i.100.muscle.fasta > $i.100.muscle.fasta.rmn
fastareformat $i.100.muscle.fasta.rmn > $i.100.muscle.fasta.rmn2

if [ -e $i.100.muscle.fasta.rmn2.medaka ]; then rm -rf $i.100.muscle.fasta.rmn2.medaka; fi
medaka_consensus -i $i -d $i.100.muscle.fasta.rmn2 -o $i.100.muscle.fasta.rmn2.medaka -m r103_sup_g507 -t 1

echo ">$i" > $i.100.muscle.fasta.rmn2.medaka.fasta
cat $i.100.muscle.fasta.rmn2.medaka/consensus.fasta|tail -n+2 >> $i.100.muscle.fasta.rmn2.medaka.fasta

EOF

for i in umi-*-*.fa; do echo "$ENV_MEDAKA bash run-medaka.sh $i"; done|DOPARALLELONE

WAITPARALLEL

cat umi-*-*.fa.100.muscle.fasta.rmn2.medaka.fasta > umi-all.medaka
DO_SEQKIT seqkit fx2tab umi-all.medaka|cut -f 2|awk '{print toupper($0)}'|sort|uniq -c|sort -nr|awk '{print ">"NR"_"$1; print $2}' > umi-all.medaka.umi.fa
DO_MITOFISH blastn -db /opt/mito/mitofish_2021-06-02_complete_partial_47mix.fa -query umi-all.medaka.umi.fa -outfmt 6 -max_target_seqs 3 > umi-all.medaka.umi.fa.blastn.temp
DO_MITOFISH awk -F'\t' 'FILENAME==ARGV[1]{if($3!=""){a[$1]=$3}else if($2!=""){a[$1]="taxid:"$2}else{a[$1]=$1}} FILENAME==ARGV[2]{OFS="\t"; $2=a[$2]; print $0}' /opt/mito/mitofish_2021-06-02_complete_partial_47mix.fa.path2 umi-all.medaka.umi.fa.blastn.temp > umi-all.medaka.umi.fa.blastn
rm -f umi-all.medaka.umi.fa.blastn.temp
cat umi-all.medaka.umi.fa.blastn|(DO_MERGE myuniq.pl 1)|sort -k2,2 -t$'\t' > umi-all.medaka.umi.fa.blastn.sort
DO_SEQKIT seqkit fx2tab umi-all.medaka.umi.fa > umi-all.medaka.umi.fa.tab
DO_SEQKIT seqkit fx2tab umi-all.medaka > umi-all.medaka.tab
wc -l umi-*-*.fa|awk '{print $2"\t"$1/2}' > count.umi
cat umi-all.medaka.umi.fa.blastn.sort|cut -f 1-6|(DO_BASE awk -F'\t' 'FILENAME==ARGV[1]{count[$1]=$2} FILENAME==ARGV[2]{len1[$2]++; seq2umi[$2][len1[$2]]=$1} FILENAME==ARGV[3]{id2seq[$1]=$2} FILENAME==ARGV[4]{for(i in seq2umi[id2seq[$1]]){print $0"\t"seq2umi[id2seq[$1]][i]"\t"count[seq2umi[id2seq[$1]][i]]}}' count.umi umi-all.medaka.tab umi-all.medaka.umi.fa.tab /dev/stdin) |awk -F'\t' '{OFS="\t"; temp=$1; $1=$2; $2=$3; $3=$4; $4=$5; $5=$6; $6=temp; print $0}' |sort -k1,1 -k8,8nr -t$'\t' > umi-all.medaka.umi.fa.blastn.sort.tsv
mkdir -p umi-merge
rm -f umi-merge/*.reads.fa
for i in `seq 1 $(cat umi-all.medaka.umi.fa.blastn.sort.tsv|wc -l)`; do a=`head -n $i umi-all.medaka.umi.fa.blastn.sort.tsv|tail -n 1`; id=`echo "$a"|cut -f 6`; umi=`echo "$a"|cut -f 7`; cat $umi >> umi-merge/$id.reads.fa; done
cat umi-all.medaka.umi.fa|awk '$0~"^>"{filename="umi-merge/"substr($0,2)".cons.fa"} {print $0 > filename}'
cd umi-merge
wc -l *.reads.fa|awk '{print $2"\t"$1/2}'|sed 's/.reads.fa//' > count.reads.txt
awk -F'\t' 'FILENAME==ARGV[1]{c[$1]=$2} FILENAME==ARGV[2]{print c[$1]"\t"$0}' count.reads.txt ../umi-all.medaka.umi.fa.blastn.sort|sort -k3,3 -k1,1nr -t$'\t' > count.spec.txt
if [ -e temp.spec.result ]; then rm -f temp.spec.result; fi
if [ -e temp.spec.result.id ]; then rm -f temp.spec.result.id; fi
cut -f 3 count.spec.txt |sort|uniq > count.spec.txt.idtemp
for i2 in `seq 1 $(cat count.spec.txt.idtemp|wc -l)`; do
 i=`head -n $i2 count.spec.txt.idtemp|tail -n 1`;
 awk -F'\t' -v key="$i" '$3==key' count.spec.txt > temp.spec;
 n=`cat temp.spec|wc -l`;
 for j in `seq 1 $n`; do
  if [ $n = 0 ]; then echo ======== $i completed; break; fi;
  refid=`head -n 1 temp.spec|cut -f 2`;
  refcnt=`head -n 1 temp.spec|cut -f 1`;
  echo $refid$'\t'$refid >> temp.result.id
  if [ $n = 1 ]; then head -n 1 temp.spec >> temp.spec.result; echo ======== $i completed; break; fi;
  if [ -e temp.spec.temp ]; then rm -f temp.spec.temp; fi;
  touch temp.spec.temp;
  for k in `seq 2 $(cat temp.spec|wc -l)`; do
   tempid=`head -n $k temp.spec|tail -n 1|cut -f 2`;
   tempcnt=`head -n $k temp.spec|tail -n 1|cut -f 1`;
   cp $refid.cons.fa temp.medaka.$tempid.ref.fa
   if [ -e temp.medaka.$tempid ]; then DO_BASE rm -rf temp.medaka.$tempid; fi;
   echo "$ENV_MEDAKA medaka_haploid_variant -i $tempid.reads.fa -r temp.medaka.$tempid.ref.fa -o temp.medaka.$tempid -m r103_sup_variant_g507 -s -t 4";
  done|xargs -I {} -P 8 bash -c "{}"
  for k in `seq 2 $(cat temp.spec|wc -l)`; do
   tempid=`head -n $k temp.spec|tail -n 1|cut -f 2`;
   tempcnt=`head -n $k temp.spec|tail -n 1|cut -f 1`;
   DO_BASE rm -f temp.medaka.$tempid.ref.fa temp.medaka.$tempid.ref.fa.fai temp.medaka.$tempid.ref.fa.mmi
   if [ `grep -v "^#" temp.medaka.$tempid/medaka.annotated.vcf|sed 's/.*;SR=//; s/\t.*//'|awk -F, '$3>$1'|wc -l` = 0 ]; then
    echo ========== $i: $tempid was merged to $refid
    echo $tempid$'\t'$refid >> temp.result.id
    refcnt=`expr $refcnt + $tempcnt`
   else
    echo ========== $i: $tempid was separated from $refid
    head -n $k temp.spec|tail -n 1 >> temp.spec.temp
   fi
   DO_BASE rm -rf temp.medaka.$tempid
  done;
  echo $refcnt$'\t'"`head -n 1 temp.spec|cut -f 2-`" >> temp.spec.result
  cp temp.spec.temp temp.spec;
  n=`cat temp.spec|wc -l`;
 done;
done
mv temp.spec.result count.spec.merge.txt
mv temp.result.id count.spec.merge.id.txt
DO_BASE rm -rf temp.spec temp.medaka temp.spec.temp
rm -f count.spec.txt.idtemp

awk -F'\t' '{split($1,arr,"_"); cnt[$2]+=arr[2]} END{for(i in cnt){print i"\t"cnt[i]}}' count.spec.merge.id.txt > count.spec.merge.id.txt2

cd ..
echo -e "Reads\tCluster ID\tNumber of UMI\tSpecies\tTaxonomy Path\tTop hit similarity to MitoFISH\tAlignment length\tMismatchs\tGap length\tSequence" > result.txt
cat umi-merge/*.cons.fa|(DO_SEQKIT seqkit fx2tab)|awk -F'\t' 'FILENAME==ARGV[1]{seq[$1]=$2} FILENAME==ARGV[2]{umi[$1]=$2} FILENAME==ARGV[3]{OFS="\t"; split($3,arr,";"); $3=arr[length(arr)]"\t"$3; id=$2; $2=$2"\t"umi[$2]; print $0"\t"seq[id]}' /dev/stdin umi-merge/count.spec.merge.id.txt2  <(cat umi-merge/count.spec.merge.txt|cut -f 1-7) >> result.txt
DO_MERGE java -Xmx1G -jar /usr/local/bin/excel2.jar result.txt result.xlsx
mv -f result.txt result.xlsx ..

post_processing

#<option detail>
#</option detail>

