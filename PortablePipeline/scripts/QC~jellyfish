#!/bin/bash

explanation='
Fast, Parallel k-mer Counting for genome size estimation
'
inputdef='
input_1:directory:FASTA/FASTQ(.gz):*.fasta,*.fa,*.fastq,*.fq,*.fasta.gz,*.fa.gz,*.fastq.gz,*.fq.gz
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):32
opt_j:jellyfish option:-m 21 -s 1000000 -C
'
runcmd="$0 -c #opt_c# -m #opt_m# -j #opt_j# #input_1#"

export IM_JELLYFISH="quay.io/biocontainers/jellyfish:2.2.10--h2d50403_0"
export IM_R="c2997108/centos6:2"
export IM_SEQKIT="quay.io/biocontainers/seqkit:0.12.1--0"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eu
set -o pipefail

cd $input_1

r1=`ls |egrep "[.]f(ast|)(a|q)([.]gz|)$" || echo ""`

if [ "$r1" = "" ]; then echo Place fasta/fastq or fasta.gz/fastq.gz files in this folder; exit; fi

set -x
cmd="jellyfish count -o output -t $N_CPU $opt_j"
for i in $r1; do
 if [ `echo $i|grep gz$|wc -l` = 1 ];then
  cmd="$cmd "'<(zcat '$i')'
 else
  cmd="$cmd "$i
 fi
done
echo "$cmd"
eval "DO_JELLYFISH bash -c '$cmd'"
#if [ -e output0 ]; then
# DO_JELLYFISH jellyfish merge -o output output[0-9]*
#fi
DO_JELLYFISH jellyfish histo --high=100000000 output > output.txt
rm -f output

echo 'library(Cairo)
a=read.table("output.txt")
CairoPNG("kmer-graph.png", width = 1000, height = 1000)
plot(a,log="xy",type="o", main="K-mer distribution", xlab="K-mer coverage", ylab="K-mer frequency", cex=0.5)
dev.off()

m=floor(log2(max(a[,1])))
c=rep(0,m+1)
for(i in 1:(dim(a)[1])){tempm=floor(log2(a[i,1])); c[tempm+1]=c[tempm+1]+a[i,1]*a[i,2]}
d=as.matrix(c)
row.names(d)=2^(0:m)
CairoPNG("kmer-base-histogram.png", width = 1000, height = 1000)
barplot(t(d),xlab = "K-mer frequency section", ylab = "K-mer frequency x coverage")
dev.off()'|(DO_R R --vanilla < /dev/stdin)

DO_SEQKIT seqkit stats $r1 | tee reads.stats
awk 'NR>1{gsub(/,/,"",$4); reads+=$4; gsub(/,/,"",$5); sum+=$5} END{print reads"\t"sum"\t"sum/reads}' reads.stats > reads.stats.txt

awk '{
  #通常はfreq=1の時がノイズにより最大値でいったん減少したのちにkmerピークが出てくる
  if(tempmax==0){tempmax=$2}
  #値が上昇していれば最大値を更新
  else if($2>tempmax){tempmax=$2; localmax=tempmax; localfreq=$1}
  #一度は上昇したことがあるけど、今回は上昇していなければピークを過ぎたと判断して過去の最大値の1/5より大きければ出力
  else if(localmax>0){
   if(localmax>pastlocalmax){print localfreq"\t"localmax; pastlocalmax=localmax};
   localmax=0
  }else{
   #減少し続けているときは最大値を減らしておく
   tempmax=$2
  }
 }' output.txt > peak.txt

#ゲノムサイズ={全塩基数(=(リード数) x (リード長))} x {(リード長) - (k-merサイズ(デフォルトは21)) + 1} / (リード長) / (メインピークのカバレッジ)
#シーケンスエラー分のkmerを削除。ノイズはポアソン分布を仮定
#y2/y1=lambda/2, scale_a=y1/lambda/e^(-lambda), x>=1の合計kmer数:a*(1–e^(–lambda))

echo 'Genome size = (read length) x reads x ( read length - k-mer length + 1 ) / (read length) / (k-mer frequency of main peak)'
awk -v kmer=`echo "$opt_j"|awk '{for(i=1;i<=NF;i++){if($i=="-m"){a=1}else if(a==1){a=0; m=$i; break}}; print m}'` -F'\t' '
 FILENAME==ARGV[1]{reads=$1; avg_len=$3}
 FILENAME==ARGV[2]{peak=$1}
 FILENAME==ARGV[3]{
  split($0,arr," ");
  if(arr[1]==1){y1=arr[1]*arr[2]}else if(arr[2]==2){y2=arr[1]*arr[2]; r=2*y2/y1; a=y1/r/exp(-r)}; cnt+=arr[1]*arr[2]
 }
 END{
  OFMT="%.f";
  print "Estimated genome size (bp):";
  print avg_len * reads * ( avg_len - kmer + 1 ) / avg_len / peak
  print "Estimated genome size with sequence errors removed (bp):"
  print avg_len * reads * ( avg_len - kmer + 1 ) * (cnt-a*(1-exp(-r)))/cnt / avg_len / peak
}
' reads.stats.txt <(tail -n 1 peak.txt) output.txt | tee estimated.txt

post_processing
#<option detail>
#<opt_j>
 -m, --mer-len=uint32                    *Length of mer
 -s, --size=uint64                       *Initial hash size
 -c, --counter-len=Length in bits         Length bits of counting field (7)
     --out-counter-len=Length in bytes    Length in bytes of counter field in output (4)
 -C, --canonical                          Count both strand, canonical representation (false)
     --bc=path                            Bloom counter to filter out singleton mers
     --bf-size=uint64                     Use bloom filter to count high-frequency mers
     --bf-fp=double                       False positive rate of bloom filter (0.01)
 -Q, --min-qual-char=string               Any base with quality below this character is changed to N
 -p, --reprobes=uint32                    Maximum number of reprobes (126)
     --text                               Dump in text format (false)
     --disk                               Disk operation. Do not do size doubling (false)
 -L, --lower-count=uint64                 Don't output k-mer with count < lower-count
 -U, --upper-count=uint64                 Don't output k-mer with count > upper-count
     --timing=Timing file                 Print timing information
#</opt_j>
#</option detail>

