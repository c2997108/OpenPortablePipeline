#!/bin/bash

explanation='
YaHS: yet another Hi-C scaffolding tool
'
inputdef='
input_1:directory:paired-end FASTQ(.gz) files:*.fastq,*.fq,*.fastq.gz,*.fq.gz
input_2::reference genome file:*.fa,*.fasta,*.fsa,*.fna,*.fa.gz,*.fasta.gz,*.fsa.gz,*.fna.gz
input_3:directory option:bwa index:*.amb,*.ann,*.bwt,*.pac,*.sa
'
optiondef='
opt_c:cpu threads:8
opt_m:memory limit (GB):32
opt_b:BWA MEM options:
opt_y:YaHS options:
opt_j:juicebox_tools.jar pre options:-r 100000
'
runcmd="$0 -c #opt_c# -m #opt_m# -b #opt_b# -y #opt_y# #input_1# #input_2# #input_3#"

export IM_BWA="quay.io/biocontainers/bwa:0.7.17--pl5.22.0_1"
export IM_SAMTOOLS="biocontainers/samtools:v1.7.0_cv4"
export IM_BEDTOOLS="biocontainers/bedtools:v2.28.0_cv2"
export IM_EXONERATE="quay.io/biocontainers/exonerate:2.2.0--1"
export IM_YAHS="c2997108/centos7:mamba-salsa_4-yahs_2"

source $(dirname `readlink -f $0 || echo $0`)/common.sh

set -eux
set -o pipefail

#if [ `echo "$input_2"|grep "[.]gz$"|wc -l||true` = 1 ]; then DO_BASE gzip -dc "$input_2" > `echo "$input_2"|sed 's/[.]gz$//'`; input_2=`echo "$input_2"|sed 's/[.]gz$//'`; fi

if [ "$input_3" = "" ]; then
 mkdir -p reformat
 if [ `echo "$input_2"|grep "[.]gz$"|wc -l||true` = 1 ]; then
  DO_YAHS gzip -dc "$input_2" > reformat/input.fa
  DO_EXONERATE fastareformat reformat/input.fa |sed 's/\r//g'| awk '{if($1~"^>"){str=substr($1,2); gsub("[^A-Za-z0-9_-]","_",str); print ">"str}else{print $0}}' > reformat/`basename "$input_2" .gz`
  input_2=reformat/`basename "$input_2" .gz`
 else
  DO_EXONERATE fastareformat "$input_2" |sed 's/\r//g'| awk '{if($1~"^>"){str=substr($1,2); gsub("[^A-Za-z0-9_-]","_",str); print ">"str}else{print $0}}' > reformat/`basename "$input_2"`
  input_2=reformat/`basename "$input_2"`
 fi
 DO_BWA bwa index "$input_2"
 ref="$input_2"
else
 ref="`ls -LS $input_3/*|grep [.]bwt$|head -n 1|sed 's/.bwt$//'||true`"
fi

mkdir -p output.bwa
num_fastq=0
for i in `find $input_1/ |egrep '(_R1.*|_1)[.]f(ast|)q(|[.]gz)$'`; do
 num_fastq=`expr $num_fastq + 1`
 if [ `echo $i|egrep "_1[.]f(ast|)q(|[.]gz)$"|wc -l||true` = 1 ]; then
  i2=`echo $i|sed 's/_1[.]f\(ast\|\)q/_2.f\1q/'`;
 else
  i2=`echo $i|sed 's/_R1/_R2/'`;
 fi
 outbase=output.bwa/`basename $i|sed 's/_1[.]f.*//'|sed 's/_R1.*//'`;
 samplename=`basename $i|sed 's/_1[.]f.*//'|sed 's/_R1.*//'`;
 echo "$ENV_BWA bwa mem $opt_b -t $N_CPU '$ref' '$i' '$i2' |( $ENV_SAMTOOLS samtools view -@ $N_CPU -o '$outbase'.bam -Sb -);"
done | DOPARALLEL

WAITPARALLEL

if [ $num_fastq = 1 ]; then
 ln -s "$outbase".bam mapped.bam
else
 DO_SAMTOOLS samtools cat -o mapped.bam output.bwa/*.bam
fi

DO_SAMTOOLS samtools faidx "$input_2"

DO_YAHS yahs "$input_2" mapped.bam
(DO_YAHS juicer pre yahs.out.bin yahs.out_scaffolds_final.agp "$input_2".fai | sort -k2,2d -k6,6d -T ./ --parallel=$N_CPU -S${N_MEM_G}G | awk 'NF' > alignments_sorted.txt.part) && (mv alignments_sorted.txt.part alignments_sorted.txt)
DO_SAMTOOLS samtools faidx yahs.out_scaffolds_final.fa
cut -f 1,2 yahs.out_scaffolds_final.fa.fai > yahs.out_scaffolds_final.fa.chrom.size
(DO_YAHS java -Xmx${N_MEM_G}G -jar /usr/local/juicer_tools_1.22.01.jar pre --threads $N_CPU $opt_j alignments_sorted.txt out.hic.part yahs.out_scaffolds_final.fa.chrom.size) && (mv out.hic.part out.hic)
DO_YAHS juicer pre -a -o out_JBAT yahs.out.bin yahs.out_scaffolds_final.agp "$input_2".fai >out_JBAT.log 2>&1
cat out_JBAT.log  | grep PRE_C_SIZE | awk '{print $2" "$3}' > out_JBAT.log.PRE_C_SIZE
(DO_YAHS java -Xmx${N_MEM_G}G -jar /usr/local/juicer_tools_1.22.01.jar pre --threads $N_CPU $opt_j out_JBAT.txt out_JBAT.hic.part out_JBAT.log.PRE_C_SIZE) && (mv out_JBAT.hic.part out_JBAT.hic)


echo After editing with juice_box, use the following command: juicer post -o out_JBAT out_JBAT.review.assembly out_JBAT.liftover.agp "$input_2"

post_processing
#<option detail>
#<opt_b>
Algorithm options:

       -t INT        number of threads [1]
       -k INT        minimum seed length [19]
       -w INT        band width for banded alignment [100]
       -d INT        off-diagonal X-dropoff [100]
       -r FLOAT      look for internal seeds inside a seed longer than {-k} * FLOAT [1.5]
       -y INT        seed occurrence for the 3rd round seeding [20]
       -c INT        skip seeds with more than INT occurrences [500]
       -D FLOAT      drop chains shorter than FLOAT fraction of the longest overlapping chain [0.50]
       -W INT        discard a chain if seeded bases shorter than INT [0]
       -m INT        perform at most INT rounds of mate rescues for each read [50]
       -S            skip mate rescue
       -P            skip pairing; mate rescue performed unless -S also in use

Scoring options:

       -A INT        score for a sequence match, which scales options -TdBOELU unless overridden [1]
       -B INT        penalty for a mismatch [4]
       -O INT[,INT]  gap open penalties for deletions and insertions [6,6]
       -E INT[,INT]  gap extension penalty; a gap of size k cost '{-O} + {-E}*k' [1,1]
       -L INT[,INT]  penalty for 5'- and 3'-end clipping [5,5]
       -U INT        penalty for an unpaired read pair [17]

       -x STR        read type. Setting -x changes multiple parameters unless overriden [null]
                     pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref)
                     ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref)
                     intractg: -B9 -O16 -L5  (intra-species contigs to ref)

Input/output options:

       -p            smart pairing (ignoring in2.fq)
       -R STR        read group header line such as '@RG\tID:foo\tSM:bar' [null]
       -H STR/FILE   insert STR to header if it starts with @; or insert lines in FILE [null]
       -j            treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file)

       -v INT        verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]
       -T INT        minimum score to output [30]
       -h INT[,INT]  if there are <INT hits with score >80% of the max score, output all in XA [5,200]
       -a            output all alignments for SE or unpaired PE
       -C            append FASTA/FASTQ comment to SAM output
       -V            output the reference FASTA header in the XR tag
       -Y            use soft clipping for supplementary alignments
       -M            mark shorter split hits as secondary

       -I FLOAT[,FLOAT[,INT[,INT]]]
                     specify the mean, standard deviation (10% of the mean if absent), max
                     (4 sigma from the mean if absent) and min of the insert size distribution.
                     FR orientation only. [inferred]

Note: Please read the man page for detailed description of the command line and options.
#</opt_b>
#<opt_y>
Options:
    -a FILE                AGP file (for rescaffolding) [none]
    -r INT[,INT,...]       list of resolutions in ascending order [automate]
    -e STR                 restriction enzyme cutting sites [none]
    -l INT                 minimum length of a contig to scaffold [0]
    -q INT                 minimum mapping quality [10]
    --no-contig-ec         do not do contig error correction
    --no-scaffold-ec       do not do scaffold error correction
    --no-mem-check         do not do memory check at runtime
    --file-type STR        input file type BED|BAM|BIN|PA5, file name extension is ignored if set
    --read-length          read length (required for PA5 format input) [150]
    -o STR                 prefix of output files [yahs.out]
    -v INT                 verbose level [0]
    -?                     print long help with extra option list
    --version              show version number
#</opt_y>
#</option detail>

